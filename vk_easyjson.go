// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package vk

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC7452bc1DecodeGithubComStek29Vk(in *jlexer.Lexer, out *WallpostStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "reach_subscribers":
			out.ReachSubscribers = int(in.Int())
		case "reach_total":
			out.ReachTotal = int(in.Int())
		case "links":
			out.Links = int(in.Int())
		case "to_group":
			out.ToGroup = int(in.Int())
		case "join_group":
			out.JoinGroup = int(in.Int())
		case "report":
			out.Report = int(in.Int())
		case "hide":
			out.Hide = int(in.Int())
		case "unsubscribe":
			out.Unsubscribe = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk(out *jwriter.Writer, in WallpostStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"reach_subscribers\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ReachSubscribers))
	}
	{
		const prefix string = ",\"reach_total\":"
		out.RawString(prefix)
		out.Int(int(in.ReachTotal))
	}
	{
		const prefix string = ",\"links\":"
		out.RawString(prefix)
		out.Int(int(in.Links))
	}
	{
		const prefix string = ",\"to_group\":"
		out.RawString(prefix)
		out.Int(int(in.ToGroup))
	}
	{
		const prefix string = ",\"join_group\":"
		out.RawString(prefix)
		out.Int(int(in.JoinGroup))
	}
	{
		const prefix string = ",\"report\":"
		out.RawString(prefix)
		out.Int(int(in.Report))
	}
	{
		const prefix string = ",\"hide\":"
		out.RawString(prefix)
		out.Int(int(in.Hide))
	}
	{
		const prefix string = ",\"unsubscribe\":"
		out.RawString(prefix)
		out.Int(int(in.Unsubscribe))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WallpostStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WallpostStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WallpostStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WallpostStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk1(in *jlexer.Lexer, out *WallRepost) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "postponed_id":
			out.PostponedID = int(in.Int())
		case "id":
			out.ID = int(in.Int())
		case "owner_id":
			out.OwnerID = int(in.Int())
		case "from_id":
			out.FromID = int(in.Int())
		case "access_key":
			out.AccessKey = string(in.String())
		case "created_by":
			out.CreatedBy = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_owner_id":
			out.ReplyOwnerID = int(in.Int())
		case "reply_post_id":
			out.ReplyPostID = int(in.Int())
		case "friends_only":
			(out.FriendsOnly).UnmarshalEasyJSON(in)
		case "comments":
			if in.IsNull() {
				in.Skip()
				out.Comments = nil
			} else {
				if out.Comments == nil {
					out.Comments = new(struct {
						Count         int     `json:"count"`
						CanPost       BoolInt `json:"can_post"`
						GroupsCanPost BoolInt `json:"groups_can_post"`
						CanClose      BoolInt `json:"can_close"`
						CanOpen       BoolInt `json:"can_open"`
					})
				}
				easyjsonC7452bc1Decode(in, out.Comments)
			}
		case "likes":
			if in.IsNull() {
				in.Skip()
				out.Likes = nil
			} else {
				if out.Likes == nil {
					out.Likes = new(struct {
						Count      int     `json:"count"`
						UserLikes  BoolInt `json:"user_likes"`
						CanLike    BoolInt `json:"can_like"`
						CanPublish BoolInt `json:"can_publish"`
					})
				}
				easyjsonC7452bc1Decode1(in, out.Likes)
			}
		case "reposts":
			if in.IsNull() {
				in.Skip()
				out.Reposts = nil
			} else {
				if out.Reposts == nil {
					out.Reposts = new(struct {
						Count        int     `json:"count"`
						UserReposted BoolInt `json:"user_reposted"`
					})
				}
				easyjsonC7452bc1Decode2(in, out.Reposts)
			}
		case "views":
			if in.IsNull() {
				in.Skip()
				out.Views = nil
			} else {
				if out.Views == nil {
					out.Views = new(struct {
						Count int `json:"count"`
					})
				}
				easyjsonC7452bc1Decode3(in, out.Views)
			}
		case "post_type":
			out.PostType = string(in.String())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Attachment
					if data := in.Raw(); in.Ok() {
						in.AddError((v1).UnmarshalJSON(data))
					}
					out.Attachments = append(out.Attachments, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "signer_id":
			out.SignerID = int(in.Int())
		case "copy_history":
			if in.IsNull() {
				in.Skip()
				out.CopyHistory = nil
			} else {
				in.Delim('[')
				if out.CopyHistory == nil {
					if !in.IsDelim(']') {
						out.CopyHistory = make([]Post, 0, 0)
					} else {
						out.CopyHistory = []Post{}
					}
				} else {
					out.CopyHistory = (out.CopyHistory)[:0]
				}
				for !in.IsDelim(']') {
					var v2 Post
					(v2).UnmarshalEasyJSON(in)
					out.CopyHistory = append(out.CopyHistory, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "can_pin":
			(out.CanPin).UnmarshalEasyJSON(in)
		case "can_delete":
			(out.CanDelete).UnmarshalEasyJSON(in)
		case "can_edit":
			(out.CanEdit).UnmarshalEasyJSON(in)
		case "is_pinned":
			(out.IsPinned).UnmarshalEasyJSON(in)
		case "marked_as_ads":
			(out.MarkedAsAds).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk1(out *jwriter.Writer, in WallRepost) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"postponed_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PostponedID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.OwnerID))
	}
	{
		const prefix string = ",\"from_id\":"
		out.RawString(prefix)
		out.Int(int(in.FromID))
	}
	{
		const prefix string = ",\"access_key\":"
		out.RawString(prefix)
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"created_by\":"
		out.RawString(prefix)
		out.Int(int(in.CreatedBy))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyOwnerID))
	}
	{
		const prefix string = ",\"reply_post_id\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyPostID))
	}
	{
		const prefix string = ",\"friends_only\":"
		out.RawString(prefix)
		out.Bool(bool(in.FriendsOnly))
	}
	{
		const prefix string = ",\"comments\":"
		out.RawString(prefix)
		if in.Comments == nil {
			out.RawString("null")
		} else {
			easyjsonC7452bc1Encode(out, *in.Comments)
		}
	}
	{
		const prefix string = ",\"likes\":"
		out.RawString(prefix)
		if in.Likes == nil {
			out.RawString("null")
		} else {
			easyjsonC7452bc1Encode1(out, *in.Likes)
		}
	}
	{
		const prefix string = ",\"reposts\":"
		out.RawString(prefix)
		if in.Reposts == nil {
			out.RawString("null")
		} else {
			easyjsonC7452bc1Encode2(out, *in.Reposts)
		}
	}
	{
		const prefix string = ",\"views\":"
		out.RawString(prefix)
		if in.Views == nil {
			out.RawString("null")
		} else {
			easyjsonC7452bc1Encode3(out, *in.Views)
		}
	}
	{
		const prefix string = ",\"post_type\":"
		out.RawString(prefix)
		out.String(string(in.PostType))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Attachments {
				if v3 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1EncodeGithubComStek29Vk2(out, v4)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"signer_id\":"
		out.RawString(prefix)
		out.Int(int(in.SignerID))
	}
	{
		const prefix string = ",\"copy_history\":"
		out.RawString(prefix)
		if in.CopyHistory == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.CopyHistory {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"can_pin\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanPin))
	}
	{
		const prefix string = ",\"can_delete\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanDelete))
	}
	{
		const prefix string = ",\"can_edit\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanEdit))
	}
	{
		const prefix string = ",\"is_pinned\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPinned))
	}
	{
		const prefix string = ",\"marked_as_ads\":"
		out.RawString(prefix)
		out.Bool(bool(in.MarkedAsAds))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WallRepost) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WallRepost) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WallRepost) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WallRepost) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk1(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk2(in *jlexer.Lexer, out *Attachment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "val":
			if m, ok := out.Val.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Val.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Val = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk2(out *jwriter.Writer, in Attachment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"val\":"
		out.RawString(prefix[1:])
		if m, ok := in.Val.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Val.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Val))
		}
	}
	out.RawByte('}')
}
func easyjsonC7452bc1Decode3(in *jlexer.Lexer, out *struct {
	Count int `json:"count"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1Encode3(out *jwriter.Writer, in struct {
	Count int `json:"count"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Count))
	}
	out.RawByte('}')
}
func easyjsonC7452bc1Decode2(in *jlexer.Lexer, out *struct {
	Count        int     `json:"count"`
	UserReposted BoolInt `json:"user_reposted"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		case "user_reposted":
			(out.UserReposted).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1Encode2(out *jwriter.Writer, in struct {
	Count        int     `json:"count"`
	UserReposted BoolInt `json:"user_reposted"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"user_reposted\":"
		out.RawString(prefix)
		out.Bool(bool(in.UserReposted))
	}
	out.RawByte('}')
}
func easyjsonC7452bc1Decode1(in *jlexer.Lexer, out *struct {
	Count      int     `json:"count"`
	UserLikes  BoolInt `json:"user_likes"`
	CanLike    BoolInt `json:"can_like"`
	CanPublish BoolInt `json:"can_publish"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		case "user_likes":
			(out.UserLikes).UnmarshalEasyJSON(in)
		case "can_like":
			(out.CanLike).UnmarshalEasyJSON(in)
		case "can_publish":
			(out.CanPublish).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1Encode1(out *jwriter.Writer, in struct {
	Count      int     `json:"count"`
	UserLikes  BoolInt `json:"user_likes"`
	CanLike    BoolInt `json:"can_like"`
	CanPublish BoolInt `json:"can_publish"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"user_likes\":"
		out.RawString(prefix)
		out.Bool(bool(in.UserLikes))
	}
	{
		const prefix string = ",\"can_like\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanLike))
	}
	{
		const prefix string = ",\"can_publish\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanPublish))
	}
	out.RawByte('}')
}
func easyjsonC7452bc1Decode(in *jlexer.Lexer, out *struct {
	Count         int     `json:"count"`
	CanPost       BoolInt `json:"can_post"`
	GroupsCanPost BoolInt `json:"groups_can_post"`
	CanClose      BoolInt `json:"can_close"`
	CanOpen       BoolInt `json:"can_open"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		case "can_post":
			(out.CanPost).UnmarshalEasyJSON(in)
		case "groups_can_post":
			(out.GroupsCanPost).UnmarshalEasyJSON(in)
		case "can_close":
			(out.CanClose).UnmarshalEasyJSON(in)
		case "can_open":
			(out.CanOpen).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1Encode(out *jwriter.Writer, in struct {
	Count         int     `json:"count"`
	CanPost       BoolInt `json:"can_post"`
	GroupsCanPost BoolInt `json:"groups_can_post"`
	CanClose      BoolInt `json:"can_close"`
	CanOpen       BoolInt `json:"can_open"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"can_post\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanPost))
	}
	{
		const prefix string = ",\"groups_can_post\":"
		out.RawString(prefix)
		out.Bool(bool(in.GroupsCanPost))
	}
	{
		const prefix string = ",\"can_close\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanClose))
	}
	{
		const prefix string = ",\"can_open\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanOpen))
	}
	out.RawByte('}')
}
func easyjsonC7452bc1DecodeGithubComStek29Vk3(in *jlexer.Lexer, out *WallReplyRestore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "post_id":
			out.PostID = int(in.Int())
		case "post_owner_id":
			out.PostOwnerID = int(in.Int())
		case "id":
			out.ID = int(in.Int())
		case "from_id":
			out.FromID = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_to_user":
			out.ReplyToUser = int(in.Int())
		case "reply_to_comment":
			out.ReplyToComment = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v7 Attachment
					if data := in.Raw(); in.Ok() {
						in.AddError((v7).UnmarshalJSON(data))
					}
					out.Attachments = append(out.Attachments, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk3(out *jwriter.Writer, in WallReplyRestore) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"post_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PostID))
	}
	{
		const prefix string = ",\"post_owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.PostOwnerID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"from_id\":"
		out.RawString(prefix)
		out.Int(int(in.FromID))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_to_user\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyToUser))
	}
	{
		const prefix string = ",\"reply_to_comment\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyToComment))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Attachments {
				if v8 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1EncodeGithubComStek29Vk2(out, v9)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WallReplyRestore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WallReplyRestore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WallReplyRestore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WallReplyRestore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk3(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk4(in *jlexer.Lexer, out *WallReplyNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "post_id":
			out.PostID = int(in.Int())
		case "post_owner_id":
			out.PostOwnerID = int(in.Int())
		case "id":
			out.ID = int(in.Int())
		case "from_id":
			out.FromID = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_to_user":
			out.ReplyToUser = int(in.Int())
		case "reply_to_comment":
			out.ReplyToComment = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v10 Attachment
					if data := in.Raw(); in.Ok() {
						in.AddError((v10).UnmarshalJSON(data))
					}
					out.Attachments = append(out.Attachments, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk4(out *jwriter.Writer, in WallReplyNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"post_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PostID))
	}
	{
		const prefix string = ",\"post_owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.PostOwnerID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"from_id\":"
		out.RawString(prefix)
		out.Int(int(in.FromID))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_to_user\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyToUser))
	}
	{
		const prefix string = ",\"reply_to_comment\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyToComment))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Attachments {
				if v11 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1EncodeGithubComStek29Vk2(out, v12)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WallReplyNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WallReplyNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WallReplyNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WallReplyNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk4(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk5(in *jlexer.Lexer, out *WallReplyEdit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "post_id":
			out.PostID = int(in.Int())
		case "post_owner_id":
			out.PostOwnerID = int(in.Int())
		case "id":
			out.ID = int(in.Int())
		case "from_id":
			out.FromID = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_to_user":
			out.ReplyToUser = int(in.Int())
		case "reply_to_comment":
			out.ReplyToComment = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v13 Attachment
					if data := in.Raw(); in.Ok() {
						in.AddError((v13).UnmarshalJSON(data))
					}
					out.Attachments = append(out.Attachments, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk5(out *jwriter.Writer, in WallReplyEdit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"post_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PostID))
	}
	{
		const prefix string = ",\"post_owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.PostOwnerID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"from_id\":"
		out.RawString(prefix)
		out.Int(int(in.FromID))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_to_user\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyToUser))
	}
	{
		const prefix string = ",\"reply_to_comment\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyToComment))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Attachments {
				if v14 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1EncodeGithubComStek29Vk2(out, v15)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WallReplyEdit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WallReplyEdit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WallReplyEdit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WallReplyEdit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk5(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk6(in *jlexer.Lexer, out *WallReplyDelete) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "owner_id":
			out.OwnerID = int(in.Int())
		case "id":
			out.ID = int(in.Int())
		case "deleter_id":
			out.DeleterID = int(in.Int())
		case "post_id":
			out.PostID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk6(out *jwriter.Writer, in WallReplyDelete) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.OwnerID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"deleter_id\":"
		out.RawString(prefix)
		out.Int(int(in.DeleterID))
	}
	{
		const prefix string = ",\"post_id\":"
		out.RawString(prefix)
		out.Int(int(in.PostID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WallReplyDelete) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WallReplyDelete) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WallReplyDelete) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WallReplyDelete) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk6(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk7(in *jlexer.Lexer, out *WallReply) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "post_id":
			out.PostID = int(in.Int())
		case "owner_id":
			out.OwnerID = int(in.Int())
		case "id":
			out.ID = int(in.Int())
		case "from_id":
			out.FromID = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_to_user":
			out.ReplyToUser = int(in.Int())
		case "reply_to_comment":
			out.ReplyToComment = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v16 Attachment
					if data := in.Raw(); in.Ok() {
						in.AddError((v16).UnmarshalJSON(data))
					}
					out.Attachments = append(out.Attachments, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk7(out *jwriter.Writer, in WallReply) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"post_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PostID))
	}
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.OwnerID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"from_id\":"
		out.RawString(prefix)
		out.Int(int(in.FromID))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_to_user\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyToUser))
	}
	{
		const prefix string = ",\"reply_to_comment\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyToComment))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Attachments {
				if v17 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1EncodeGithubComStek29Vk2(out, v18)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WallReply) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WallReply) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WallReply) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WallReply) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk7(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk8(in *jlexer.Lexer, out *WallPostNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "postponed_id":
			out.PostponedID = int(in.Int())
		case "id":
			out.ID = int(in.Int())
		case "owner_id":
			out.OwnerID = int(in.Int())
		case "from_id":
			out.FromID = int(in.Int())
		case "access_key":
			out.AccessKey = string(in.String())
		case "created_by":
			out.CreatedBy = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_owner_id":
			out.ReplyOwnerID = int(in.Int())
		case "reply_post_id":
			out.ReplyPostID = int(in.Int())
		case "friends_only":
			(out.FriendsOnly).UnmarshalEasyJSON(in)
		case "comments":
			if in.IsNull() {
				in.Skip()
				out.Comments = nil
			} else {
				if out.Comments == nil {
					out.Comments = new(struct {
						Count         int     `json:"count"`
						CanPost       BoolInt `json:"can_post"`
						GroupsCanPost BoolInt `json:"groups_can_post"`
						CanClose      BoolInt `json:"can_close"`
						CanOpen       BoolInt `json:"can_open"`
					})
				}
				easyjsonC7452bc1Decode(in, out.Comments)
			}
		case "likes":
			if in.IsNull() {
				in.Skip()
				out.Likes = nil
			} else {
				if out.Likes == nil {
					out.Likes = new(struct {
						Count      int     `json:"count"`
						UserLikes  BoolInt `json:"user_likes"`
						CanLike    BoolInt `json:"can_like"`
						CanPublish BoolInt `json:"can_publish"`
					})
				}
				easyjsonC7452bc1Decode1(in, out.Likes)
			}
		case "reposts":
			if in.IsNull() {
				in.Skip()
				out.Reposts = nil
			} else {
				if out.Reposts == nil {
					out.Reposts = new(struct {
						Count        int     `json:"count"`
						UserReposted BoolInt `json:"user_reposted"`
					})
				}
				easyjsonC7452bc1Decode2(in, out.Reposts)
			}
		case "views":
			if in.IsNull() {
				in.Skip()
				out.Views = nil
			} else {
				if out.Views == nil {
					out.Views = new(struct {
						Count int `json:"count"`
					})
				}
				easyjsonC7452bc1Decode3(in, out.Views)
			}
		case "post_type":
			out.PostType = string(in.String())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v19 Attachment
					if data := in.Raw(); in.Ok() {
						in.AddError((v19).UnmarshalJSON(data))
					}
					out.Attachments = append(out.Attachments, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "signer_id":
			out.SignerID = int(in.Int())
		case "copy_history":
			if in.IsNull() {
				in.Skip()
				out.CopyHistory = nil
			} else {
				in.Delim('[')
				if out.CopyHistory == nil {
					if !in.IsDelim(']') {
						out.CopyHistory = make([]Post, 0, 0)
					} else {
						out.CopyHistory = []Post{}
					}
				} else {
					out.CopyHistory = (out.CopyHistory)[:0]
				}
				for !in.IsDelim(']') {
					var v20 Post
					(v20).UnmarshalEasyJSON(in)
					out.CopyHistory = append(out.CopyHistory, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "can_pin":
			(out.CanPin).UnmarshalEasyJSON(in)
		case "can_delete":
			(out.CanDelete).UnmarshalEasyJSON(in)
		case "can_edit":
			(out.CanEdit).UnmarshalEasyJSON(in)
		case "is_pinned":
			(out.IsPinned).UnmarshalEasyJSON(in)
		case "marked_as_ads":
			(out.MarkedAsAds).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk8(out *jwriter.Writer, in WallPostNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"postponed_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PostponedID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.OwnerID))
	}
	{
		const prefix string = ",\"from_id\":"
		out.RawString(prefix)
		out.Int(int(in.FromID))
	}
	{
		const prefix string = ",\"access_key\":"
		out.RawString(prefix)
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"created_by\":"
		out.RawString(prefix)
		out.Int(int(in.CreatedBy))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyOwnerID))
	}
	{
		const prefix string = ",\"reply_post_id\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyPostID))
	}
	{
		const prefix string = ",\"friends_only\":"
		out.RawString(prefix)
		out.Bool(bool(in.FriendsOnly))
	}
	{
		const prefix string = ",\"comments\":"
		out.RawString(prefix)
		if in.Comments == nil {
			out.RawString("null")
		} else {
			easyjsonC7452bc1Encode(out, *in.Comments)
		}
	}
	{
		const prefix string = ",\"likes\":"
		out.RawString(prefix)
		if in.Likes == nil {
			out.RawString("null")
		} else {
			easyjsonC7452bc1Encode1(out, *in.Likes)
		}
	}
	{
		const prefix string = ",\"reposts\":"
		out.RawString(prefix)
		if in.Reposts == nil {
			out.RawString("null")
		} else {
			easyjsonC7452bc1Encode2(out, *in.Reposts)
		}
	}
	{
		const prefix string = ",\"views\":"
		out.RawString(prefix)
		if in.Views == nil {
			out.RawString("null")
		} else {
			easyjsonC7452bc1Encode3(out, *in.Views)
		}
	}
	{
		const prefix string = ",\"post_type\":"
		out.RawString(prefix)
		out.String(string(in.PostType))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range in.Attachments {
				if v21 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1EncodeGithubComStek29Vk2(out, v22)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"signer_id\":"
		out.RawString(prefix)
		out.Int(int(in.SignerID))
	}
	{
		const prefix string = ",\"copy_history\":"
		out.RawString(prefix)
		if in.CopyHistory == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.CopyHistory {
				if v23 > 0 {
					out.RawByte(',')
				}
				(v24).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"can_pin\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanPin))
	}
	{
		const prefix string = ",\"can_delete\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanDelete))
	}
	{
		const prefix string = ",\"can_edit\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanEdit))
	}
	{
		const prefix string = ",\"is_pinned\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPinned))
	}
	{
		const prefix string = ",\"marked_as_ads\":"
		out.RawString(prefix)
		out.Bool(bool(in.MarkedAsAds))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WallPostNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WallPostNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WallPostNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WallPostNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk8(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk9(in *jlexer.Lexer, out *Wall) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "to_id":
			out.ToID = int(in.Int())
		case "id":
			out.ID = int(in.Int())
		case "owner_id":
			out.OwnerID = int(in.Int())
		case "from_id":
			out.FromID = int(in.Int())
		case "access_key":
			out.AccessKey = string(in.String())
		case "created_by":
			out.CreatedBy = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_owner_id":
			out.ReplyOwnerID = int(in.Int())
		case "reply_post_id":
			out.ReplyPostID = int(in.Int())
		case "friends_only":
			(out.FriendsOnly).UnmarshalEasyJSON(in)
		case "comments":
			if in.IsNull() {
				in.Skip()
				out.Comments = nil
			} else {
				if out.Comments == nil {
					out.Comments = new(struct {
						Count         int     `json:"count"`
						CanPost       BoolInt `json:"can_post"`
						GroupsCanPost BoolInt `json:"groups_can_post"`
						CanClose      BoolInt `json:"can_close"`
						CanOpen       BoolInt `json:"can_open"`
					})
				}
				easyjsonC7452bc1Decode(in, out.Comments)
			}
		case "likes":
			if in.IsNull() {
				in.Skip()
				out.Likes = nil
			} else {
				if out.Likes == nil {
					out.Likes = new(struct {
						Count      int     `json:"count"`
						UserLikes  BoolInt `json:"user_likes"`
						CanLike    BoolInt `json:"can_like"`
						CanPublish BoolInt `json:"can_publish"`
					})
				}
				easyjsonC7452bc1Decode1(in, out.Likes)
			}
		case "reposts":
			if in.IsNull() {
				in.Skip()
				out.Reposts = nil
			} else {
				if out.Reposts == nil {
					out.Reposts = new(struct {
						Count        int     `json:"count"`
						UserReposted BoolInt `json:"user_reposted"`
					})
				}
				easyjsonC7452bc1Decode2(in, out.Reposts)
			}
		case "views":
			if in.IsNull() {
				in.Skip()
				out.Views = nil
			} else {
				if out.Views == nil {
					out.Views = new(struct {
						Count int `json:"count"`
					})
				}
				easyjsonC7452bc1Decode3(in, out.Views)
			}
		case "post_type":
			out.PostType = string(in.String())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v25 Attachment
					if data := in.Raw(); in.Ok() {
						in.AddError((v25).UnmarshalJSON(data))
					}
					out.Attachments = append(out.Attachments, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "signer_id":
			out.SignerID = int(in.Int())
		case "copy_history":
			if in.IsNull() {
				in.Skip()
				out.CopyHistory = nil
			} else {
				in.Delim('[')
				if out.CopyHistory == nil {
					if !in.IsDelim(']') {
						out.CopyHistory = make([]Post, 0, 0)
					} else {
						out.CopyHistory = []Post{}
					}
				} else {
					out.CopyHistory = (out.CopyHistory)[:0]
				}
				for !in.IsDelim(']') {
					var v26 Post
					(v26).UnmarshalEasyJSON(in)
					out.CopyHistory = append(out.CopyHistory, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "can_pin":
			(out.CanPin).UnmarshalEasyJSON(in)
		case "can_delete":
			(out.CanDelete).UnmarshalEasyJSON(in)
		case "can_edit":
			(out.CanEdit).UnmarshalEasyJSON(in)
		case "is_pinned":
			(out.IsPinned).UnmarshalEasyJSON(in)
		case "marked_as_ads":
			(out.MarkedAsAds).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk9(out *jwriter.Writer, in Wall) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"to_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ToID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.OwnerID))
	}
	{
		const prefix string = ",\"from_id\":"
		out.RawString(prefix)
		out.Int(int(in.FromID))
	}
	{
		const prefix string = ",\"access_key\":"
		out.RawString(prefix)
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"created_by\":"
		out.RawString(prefix)
		out.Int(int(in.CreatedBy))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyOwnerID))
	}
	{
		const prefix string = ",\"reply_post_id\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyPostID))
	}
	{
		const prefix string = ",\"friends_only\":"
		out.RawString(prefix)
		out.Bool(bool(in.FriendsOnly))
	}
	{
		const prefix string = ",\"comments\":"
		out.RawString(prefix)
		if in.Comments == nil {
			out.RawString("null")
		} else {
			easyjsonC7452bc1Encode(out, *in.Comments)
		}
	}
	{
		const prefix string = ",\"likes\":"
		out.RawString(prefix)
		if in.Likes == nil {
			out.RawString("null")
		} else {
			easyjsonC7452bc1Encode1(out, *in.Likes)
		}
	}
	{
		const prefix string = ",\"reposts\":"
		out.RawString(prefix)
		if in.Reposts == nil {
			out.RawString("null")
		} else {
			easyjsonC7452bc1Encode2(out, *in.Reposts)
		}
	}
	{
		const prefix string = ",\"views\":"
		out.RawString(prefix)
		if in.Views == nil {
			out.RawString("null")
		} else {
			easyjsonC7452bc1Encode3(out, *in.Views)
		}
	}
	{
		const prefix string = ",\"post_type\":"
		out.RawString(prefix)
		out.String(string(in.PostType))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v27, v28 := range in.Attachments {
				if v27 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1EncodeGithubComStek29Vk2(out, v28)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"signer_id\":"
		out.RawString(prefix)
		out.Int(int(in.SignerID))
	}
	{
		const prefix string = ",\"copy_history\":"
		out.RawString(prefix)
		if in.CopyHistory == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v29, v30 := range in.CopyHistory {
				if v29 > 0 {
					out.RawByte(',')
				}
				(v30).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"can_pin\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanPin))
	}
	{
		const prefix string = ",\"can_delete\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanDelete))
	}
	{
		const prefix string = ",\"can_edit\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanEdit))
	}
	{
		const prefix string = ",\"is_pinned\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPinned))
	}
	{
		const prefix string = ",\"marked_as_ads\":"
		out.RawString(prefix)
		out.Bool(bool(in.MarkedAsAds))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Wall) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Wall) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Wall) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Wall) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk9(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk10(in *jlexer.Lexer, out *VideoNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "owner_id":
			out.OwnerID = int(in.Int())
		case "access_key":
			out.AccessKey = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "duration":
			out.Duration = int(in.Int())
		case "photo_130":
			out.Photo130 = string(in.String())
		case "photo_320":
			out.Photo320 = string(in.String())
		case "photo_640":
			out.Photo640 = string(in.String())
		case "photo_800":
			out.Photo800 = string(in.String())
		case "first_frame_130":
			out.FirstFrame130 = string(in.String())
		case "first_frame_160":
			out.FirstFrame160 = string(in.String())
		case "first_frame_320":
			out.FirstFrame320 = string(in.String())
		case "first_frame_800":
			out.FirstFrame800 = string(in.String())
		case "files":
			if in.IsNull() {
				in.Skip()
				out.Files = nil
			} else {
				if out.Files == nil {
					out.Files = new(VideoFiles)
				}
				(*out.Files).UnmarshalEasyJSON(in)
			}
		case "date":
			out.Date = int(in.Int())
		case "adding_date":
			out.AddingDate = int(in.Int())
		case "views":
			out.Views = int(in.Int())
		case "comments":
			out.Comments = int(in.Int())
		case "width":
			out.Width = int(in.Int())
		case "height":
			out.Height = int(in.Int())
		case "player":
			out.Player = string(in.String())
		case "platfrom":
			out.Platfrom = string(in.String())
		case "can_edit":
			(out.CanEdit).UnmarshalEasyJSON(in)
		case "can_comment":
			(out.CanComment).UnmarshalEasyJSON(in)
		case "can_repost":
			(out.CanRepost).UnmarshalEasyJSON(in)
		case "can_add":
			(out.CanAdd).UnmarshalEasyJSON(in)
		case "is_private":
			(out.IsPrivate).UnmarshalEasyJSON(in)
		case "processing":
			(out.Processing).UnmarshalEasyJSON(in)
		case "live":
			(out.Live).UnmarshalEasyJSON(in)
		case "upcoming":
			(out.Upcoming).UnmarshalEasyJSON(in)
		case "repeat":
			(out.Repeat).UnmarshalEasyJSON(in)
		case "likes":
			easyjsonC7452bc1Decode4(in, &out.Likes)
		case "reposts":
			easyjsonC7452bc1Decode4(in, &out.Reposts)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk10(out *jwriter.Writer, in VideoNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.OwnerID))
	}
	{
		const prefix string = ",\"access_key\":"
		out.RawString(prefix)
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Int(int(in.Duration))
	}
	{
		const prefix string = ",\"photo_130\":"
		out.RawString(prefix)
		out.String(string(in.Photo130))
	}
	{
		const prefix string = ",\"photo_320\":"
		out.RawString(prefix)
		out.String(string(in.Photo320))
	}
	{
		const prefix string = ",\"photo_640\":"
		out.RawString(prefix)
		out.String(string(in.Photo640))
	}
	{
		const prefix string = ",\"photo_800\":"
		out.RawString(prefix)
		out.String(string(in.Photo800))
	}
	{
		const prefix string = ",\"first_frame_130\":"
		out.RawString(prefix)
		out.String(string(in.FirstFrame130))
	}
	{
		const prefix string = ",\"first_frame_160\":"
		out.RawString(prefix)
		out.String(string(in.FirstFrame160))
	}
	{
		const prefix string = ",\"first_frame_320\":"
		out.RawString(prefix)
		out.String(string(in.FirstFrame320))
	}
	{
		const prefix string = ",\"first_frame_800\":"
		out.RawString(prefix)
		out.String(string(in.FirstFrame800))
	}
	{
		const prefix string = ",\"files\":"
		out.RawString(prefix)
		if in.Files == nil {
			out.RawString("null")
		} else {
			(*in.Files).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"adding_date\":"
		out.RawString(prefix)
		out.Int(int(in.AddingDate))
	}
	{
		const prefix string = ",\"views\":"
		out.RawString(prefix)
		out.Int(int(in.Views))
	}
	{
		const prefix string = ",\"comments\":"
		out.RawString(prefix)
		out.Int(int(in.Comments))
	}
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix)
		out.Int(int(in.Width))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	{
		const prefix string = ",\"player\":"
		out.RawString(prefix)
		out.String(string(in.Player))
	}
	{
		const prefix string = ",\"platfrom\":"
		out.RawString(prefix)
		out.String(string(in.Platfrom))
	}
	{
		const prefix string = ",\"can_edit\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanEdit))
	}
	{
		const prefix string = ",\"can_comment\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanComment))
	}
	{
		const prefix string = ",\"can_repost\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanRepost))
	}
	{
		const prefix string = ",\"can_add\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanAdd))
	}
	{
		const prefix string = ",\"is_private\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPrivate))
	}
	{
		const prefix string = ",\"processing\":"
		out.RawString(prefix)
		out.Bool(bool(in.Processing))
	}
	{
		const prefix string = ",\"live\":"
		out.RawString(prefix)
		out.Bool(bool(in.Live))
	}
	{
		const prefix string = ",\"upcoming\":"
		out.RawString(prefix)
		out.Bool(bool(in.Upcoming))
	}
	{
		const prefix string = ",\"repeat\":"
		out.RawString(prefix)
		out.Bool(bool(in.Repeat))
	}
	{
		const prefix string = ",\"likes\":"
		out.RawString(prefix)
		easyjsonC7452bc1Encode4(out, in.Likes)
	}
	{
		const prefix string = ",\"reposts\":"
		out.RawString(prefix)
		easyjsonC7452bc1Encode4(out, in.Reposts)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VideoNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VideoNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VideoNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VideoNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk10(l, v)
}
func easyjsonC7452bc1Decode4(in *jlexer.Lexer, out *struct {
	UserLikes int `json:"user_likes"`
	Count     int `json:"count"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_likes":
			out.UserLikes = int(in.Int())
		case "count":
			out.Count = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1Encode4(out *jwriter.Writer, in struct {
	UserLikes int `json:"user_likes"`
	Count     int `json:"count"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_likes\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserLikes))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	out.RawByte('}')
}
func easyjsonC7452bc1DecodeGithubComStek29Vk11(in *jlexer.Lexer, out *VideoFiles) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mp4_240":
			out.MP240 = string(in.String())
		case "mp4_360":
			out.MP360 = string(in.String())
		case "mp4_480":
			out.MP480 = string(in.String())
		case "mp4_720":
			out.MP720 = string(in.String())
		case "mp4_1080":
			out.MP1080 = string(in.String())
		case "external":
			out.External = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk11(out *jwriter.Writer, in VideoFiles) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mp4_240\":"
		out.RawString(prefix[1:])
		out.String(string(in.MP240))
	}
	{
		const prefix string = ",\"mp4_360\":"
		out.RawString(prefix)
		out.String(string(in.MP360))
	}
	{
		const prefix string = ",\"mp4_480\":"
		out.RawString(prefix)
		out.String(string(in.MP480))
	}
	{
		const prefix string = ",\"mp4_720\":"
		out.RawString(prefix)
		out.String(string(in.MP720))
	}
	{
		const prefix string = ",\"mp4_1080\":"
		out.RawString(prefix)
		out.String(string(in.MP1080))
	}
	{
		const prefix string = ",\"external\":"
		out.RawString(prefix)
		out.String(string(in.External))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VideoFiles) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VideoFiles) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VideoFiles) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VideoFiles) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk11(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk12(in *jlexer.Lexer, out *VideoCommentRestore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "video_id":
			out.VideoID = int(in.Int())
		case "video_owner_id":
			out.VideoOwnerID = int(in.Int())
		case "id":
			out.ID = int(in.Int())
		case "from_id":
			out.FromID = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_to_user":
			out.ReplyToUser = int(in.Int())
		case "reply_to_comment":
			out.ReplyToComment = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v31 Attachment
					if data := in.Raw(); in.Ok() {
						in.AddError((v31).UnmarshalJSON(data))
					}
					out.Attachments = append(out.Attachments, v31)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk12(out *jwriter.Writer, in VideoCommentRestore) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"video_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.VideoID))
	}
	{
		const prefix string = ",\"video_owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.VideoOwnerID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"from_id\":"
		out.RawString(prefix)
		out.Int(int(in.FromID))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_to_user\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyToUser))
	}
	{
		const prefix string = ",\"reply_to_comment\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyToComment))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v32, v33 := range in.Attachments {
				if v32 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1EncodeGithubComStek29Vk2(out, v33)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VideoCommentRestore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VideoCommentRestore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VideoCommentRestore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VideoCommentRestore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk12(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk13(in *jlexer.Lexer, out *VideoCommentNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "video_id":
			out.VideoID = int(in.Int())
		case "video_owner_id":
			out.VideoOwnerID = int(in.Int())
		case "id":
			out.ID = int(in.Int())
		case "from_id":
			out.FromID = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_to_user":
			out.ReplyToUser = int(in.Int())
		case "reply_to_comment":
			out.ReplyToComment = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v34 Attachment
					if data := in.Raw(); in.Ok() {
						in.AddError((v34).UnmarshalJSON(data))
					}
					out.Attachments = append(out.Attachments, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk13(out *jwriter.Writer, in VideoCommentNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"video_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.VideoID))
	}
	{
		const prefix string = ",\"video_owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.VideoOwnerID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"from_id\":"
		out.RawString(prefix)
		out.Int(int(in.FromID))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_to_user\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyToUser))
	}
	{
		const prefix string = ",\"reply_to_comment\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyToComment))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v35, v36 := range in.Attachments {
				if v35 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1EncodeGithubComStek29Vk2(out, v36)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VideoCommentNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VideoCommentNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VideoCommentNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VideoCommentNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk13(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk14(in *jlexer.Lexer, out *VideoCommentEdit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "video_id":
			out.VideoID = int(in.Int())
		case "video_owner_id":
			out.VideoOwnerID = int(in.Int())
		case "id":
			out.ID = int(in.Int())
		case "from_id":
			out.FromID = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_to_user":
			out.ReplyToUser = int(in.Int())
		case "reply_to_comment":
			out.ReplyToComment = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v37 Attachment
					if data := in.Raw(); in.Ok() {
						in.AddError((v37).UnmarshalJSON(data))
					}
					out.Attachments = append(out.Attachments, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk14(out *jwriter.Writer, in VideoCommentEdit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"video_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.VideoID))
	}
	{
		const prefix string = ",\"video_owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.VideoOwnerID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"from_id\":"
		out.RawString(prefix)
		out.Int(int(in.FromID))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_to_user\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyToUser))
	}
	{
		const prefix string = ",\"reply_to_comment\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyToComment))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.Attachments {
				if v38 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1EncodeGithubComStek29Vk2(out, v39)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VideoCommentEdit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VideoCommentEdit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VideoCommentEdit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VideoCommentEdit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk14(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk15(in *jlexer.Lexer, out *VideoCommentDelete) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "owner_id":
			out.OwnerID = int(in.Int())
		case "id":
			out.ID = int(in.Int())
		case "user_id":
			out.UserID = int(in.Int())
		case "deleter_id":
			out.DeleterID = int(in.Int())
		case "video_id":
			out.VideoID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk15(out *jwriter.Writer, in VideoCommentDelete) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.OwnerID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"deleter_id\":"
		out.RawString(prefix)
		out.Int(int(in.DeleterID))
	}
	{
		const prefix string = ",\"video_id\":"
		out.RawString(prefix)
		out.Int(int(in.VideoID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VideoCommentDelete) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VideoCommentDelete) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VideoCommentDelete) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VideoCommentDelete) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk15(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk16(in *jlexer.Lexer, out *Video) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "owner_id":
			out.OwnerID = int(in.Int())
		case "access_key":
			out.AccessKey = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "duration":
			out.Duration = int(in.Int())
		case "photo_130":
			out.Photo130 = string(in.String())
		case "photo_320":
			out.Photo320 = string(in.String())
		case "photo_640":
			out.Photo640 = string(in.String())
		case "photo_800":
			out.Photo800 = string(in.String())
		case "first_frame_130":
			out.FirstFrame130 = string(in.String())
		case "first_frame_160":
			out.FirstFrame160 = string(in.String())
		case "first_frame_320":
			out.FirstFrame320 = string(in.String())
		case "first_frame_800":
			out.FirstFrame800 = string(in.String())
		case "files":
			if in.IsNull() {
				in.Skip()
				out.Files = nil
			} else {
				if out.Files == nil {
					out.Files = new(VideoFiles)
				}
				(*out.Files).UnmarshalEasyJSON(in)
			}
		case "date":
			out.Date = int(in.Int())
		case "adding_date":
			out.AddingDate = int(in.Int())
		case "views":
			out.Views = int(in.Int())
		case "comments":
			out.Comments = int(in.Int())
		case "width":
			out.Width = int(in.Int())
		case "height":
			out.Height = int(in.Int())
		case "player":
			out.Player = string(in.String())
		case "platfrom":
			out.Platfrom = string(in.String())
		case "can_edit":
			(out.CanEdit).UnmarshalEasyJSON(in)
		case "can_comment":
			(out.CanComment).UnmarshalEasyJSON(in)
		case "can_repost":
			(out.CanRepost).UnmarshalEasyJSON(in)
		case "can_add":
			(out.CanAdd).UnmarshalEasyJSON(in)
		case "is_private":
			(out.IsPrivate).UnmarshalEasyJSON(in)
		case "processing":
			(out.Processing).UnmarshalEasyJSON(in)
		case "live":
			(out.Live).UnmarshalEasyJSON(in)
		case "upcoming":
			(out.Upcoming).UnmarshalEasyJSON(in)
		case "repeat":
			(out.Repeat).UnmarshalEasyJSON(in)
		case "likes":
			easyjsonC7452bc1Decode4(in, &out.Likes)
		case "reposts":
			easyjsonC7452bc1Decode4(in, &out.Reposts)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk16(out *jwriter.Writer, in Video) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.OwnerID))
	}
	{
		const prefix string = ",\"access_key\":"
		out.RawString(prefix)
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Int(int(in.Duration))
	}
	{
		const prefix string = ",\"photo_130\":"
		out.RawString(prefix)
		out.String(string(in.Photo130))
	}
	{
		const prefix string = ",\"photo_320\":"
		out.RawString(prefix)
		out.String(string(in.Photo320))
	}
	{
		const prefix string = ",\"photo_640\":"
		out.RawString(prefix)
		out.String(string(in.Photo640))
	}
	{
		const prefix string = ",\"photo_800\":"
		out.RawString(prefix)
		out.String(string(in.Photo800))
	}
	{
		const prefix string = ",\"first_frame_130\":"
		out.RawString(prefix)
		out.String(string(in.FirstFrame130))
	}
	{
		const prefix string = ",\"first_frame_160\":"
		out.RawString(prefix)
		out.String(string(in.FirstFrame160))
	}
	{
		const prefix string = ",\"first_frame_320\":"
		out.RawString(prefix)
		out.String(string(in.FirstFrame320))
	}
	{
		const prefix string = ",\"first_frame_800\":"
		out.RawString(prefix)
		out.String(string(in.FirstFrame800))
	}
	{
		const prefix string = ",\"files\":"
		out.RawString(prefix)
		if in.Files == nil {
			out.RawString("null")
		} else {
			(*in.Files).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"adding_date\":"
		out.RawString(prefix)
		out.Int(int(in.AddingDate))
	}
	{
		const prefix string = ",\"views\":"
		out.RawString(prefix)
		out.Int(int(in.Views))
	}
	{
		const prefix string = ",\"comments\":"
		out.RawString(prefix)
		out.Int(int(in.Comments))
	}
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix)
		out.Int(int(in.Width))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	{
		const prefix string = ",\"player\":"
		out.RawString(prefix)
		out.String(string(in.Player))
	}
	{
		const prefix string = ",\"platfrom\":"
		out.RawString(prefix)
		out.String(string(in.Platfrom))
	}
	{
		const prefix string = ",\"can_edit\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanEdit))
	}
	{
		const prefix string = ",\"can_comment\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanComment))
	}
	{
		const prefix string = ",\"can_repost\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanRepost))
	}
	{
		const prefix string = ",\"can_add\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanAdd))
	}
	{
		const prefix string = ",\"is_private\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPrivate))
	}
	{
		const prefix string = ",\"processing\":"
		out.RawString(prefix)
		out.Bool(bool(in.Processing))
	}
	{
		const prefix string = ",\"live\":"
		out.RawString(prefix)
		out.Bool(bool(in.Live))
	}
	{
		const prefix string = ",\"upcoming\":"
		out.RawString(prefix)
		out.Bool(bool(in.Upcoming))
	}
	{
		const prefix string = ",\"repeat\":"
		out.RawString(prefix)
		out.Bool(bool(in.Repeat))
	}
	{
		const prefix string = ",\"likes\":"
		out.RawString(prefix)
		easyjsonC7452bc1Encode4(out, in.Likes)
	}
	{
		const prefix string = ",\"reposts\":"
		out.RawString(prefix)
		easyjsonC7452bc1Encode4(out, in.Reposts)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Video) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Video) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Video) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Video) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk16(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk17(in *jlexer.Lexer, out *UserUnblock) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "admin_id":
			out.AdminID = int(in.Int())
		case "user_id":
			out.UserID = int(in.Int())
		case "by_end_date":
			(out.ByEndDate).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk17(out *jwriter.Writer, in UserUnblock) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"admin_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.AdminID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"by_end_date\":"
		out.RawString(prefix)
		out.Bool(bool(in.ByEndDate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserUnblock) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserUnblock) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserUnblock) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserUnblock) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk17(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk18(in *jlexer.Lexer, out *UserBlock) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "admin_id":
			out.AdminID = int(in.Int())
		case "user_id":
			out.UserID = int(in.Int())
		case "unblock_date":
			out.UnblockDate = int(in.Int())
		case "reason":
			out.Reason = UserBlockReason(in.Int())
		case "comment":
			out.Comment = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk18(out *jwriter.Writer, in UserBlock) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"admin_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.AdminID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"unblock_date\":"
		out.RawString(prefix)
		out.Int(int(in.UnblockDate))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.Int(int(in.Reason))
	}
	{
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		out.String(string(in.Comment))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserBlock) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserBlock) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserBlock) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserBlock) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk18(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk19(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "first_name":
			out.FirstName = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "deactivated":
			out.Deactivated = string(in.String())
		case "sex":
			out.Sex = int(in.Int())
		case "domain":
			out.Domain = string(in.String())
		case "maiden_name":
			out.MaidenName = string(in.String())
		case "nickname":
			out.Nickname = string(in.String())
		case "screen_name":
			out.ScreenName = string(in.String())
		case "status":
			out.Status = string(in.String())
		case "bdate":
			out.BirthDate = string(in.String())
		case "about":
			out.About = string(in.String())
		case "books":
			out.Books = string(in.String())
		case "activites":
			out.Activites = string(in.String())
		case "interests":
			out.Interests = string(in.String())
		case "games":
			out.Games = string(in.String())
		case "home_town":
			out.HomeTown = string(in.String())
		case "movies":
			out.Movies = string(in.String())
		case "music":
			out.Music = string(in.String())
		case "quotes":
			out.Quotes = string(in.String())
		case "tv":
			out.TV = string(in.String())
		case "site":
			out.Site = string(in.String())
		case "verified":
			out.Verified = int(in.Int())
		case "last_seen":
			easyjsonC7452bc1Decode5(in, &out.LastSeen)
		case "online":
			if in.IsNull() {
				in.Skip()
				out.Online = nil
			} else {
				if out.Online == nil {
					out.Online = new(int)
				}
				*out.Online = int(in.Int())
			}
		case "online_mobile":
			(out.OnlineMobile).UnmarshalEasyJSON(in)
		case "online_app":
			out.OnlineApp = int(in.Int())
		case "photo_id":
			out.PhotoID = string(in.String())
		case "photo_max":
			out.PhotoMax = string(in.String())
		case "photo_max_orig":
			out.PhotoMaxOrig = string(in.String())
		case "career":
			if in.IsNull() {
				in.Skip()
				out.Career = nil
			} else {
				in.Delim('[')
				if out.Career == nil {
					if !in.IsDelim(']') {
						out.Career = make([]struct {
							GroupID   int    `json:"group_id"`
							Company   string `json:"company"`
							CountryID int    `json:"country_id"`
							CityID    int    `json:"city_id"`
							CityName  string `json:"city_name"`
							From      int    `json:"from"`
							Until     int    `json:"until"`
							Position  string `json:"position"`
						}, 0, 0)
					} else {
						out.Career = []struct {
							GroupID   int    `json:"group_id"`
							Company   string `json:"company"`
							CountryID int    `json:"country_id"`
							CityID    int    `json:"city_id"`
							CityName  string `json:"city_name"`
							From      int    `json:"from"`
							Until     int    `json:"until"`
							Position  string `json:"position"`
						}{}
					}
				} else {
					out.Career = (out.Career)[:0]
				}
				for !in.IsDelim(']') {
					var v40 struct {
						GroupID   int    `json:"group_id"`
						Company   string `json:"company"`
						CountryID int    `json:"country_id"`
						CityID    int    `json:"city_id"`
						CityName  string `json:"city_name"`
						From      int    `json:"from"`
						Until     int    `json:"until"`
						Position  string `json:"position"`
					}
					easyjsonC7452bc1Decode6(in, &v40)
					out.Career = append(out.Career, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "city":
			if in.IsNull() {
				in.Skip()
				out.City = nil
			} else {
				if out.City == nil {
					out.City = new(BaseObject)
				}
				(*out.City).UnmarshalEasyJSON(in)
			}
		case "country":
			if in.IsNull() {
				in.Skip()
				out.Country = nil
			} else {
				if out.Country == nil {
					out.Country = new(BaseObject)
				}
				(*out.Country).UnmarshalEasyJSON(in)
			}
		case "mobile_phone":
			out.MobilePhone = string(in.String())
		case "home_phone":
			out.HomePhone = string(in.String())
		case "crop_photo":
			if in.IsNull() {
				in.Skip()
				out.CropPhoto = nil
			} else {
				if out.CropPhoto == nil {
					out.CropPhoto = new(CropPhoto)
				}
				(*out.CropPhoto).UnmarshalEasyJSON(in)
			}
		case "counters":
			if in.IsNull() {
				in.Skip()
				out.Counters = nil
			} else {
				if out.Counters == nil {
					out.Counters = new(struct {
						Albums        int `json:"albums"`
						Videos        int `json:"videos"`
						Audios        int `json:"audios"`
						Photos        int `json:"photos"`
						Notes         int `json:"notes"`
						Friends       int `json:"friends"`
						Groups        int `json:"groups"`
						OnlineFriends int `json:"online_friends"`
						MutualFriends int `json:"mutual_friends"`
						UserVideos    int `json:"user_videos"`
						Followers     int `json:"followers"`
						Pages         int `json:"pages"`
					})
				}
				easyjsonC7452bc1Decode7(in, out.Counters)
			}
		case "common_count":
			out.CommonCount = int(in.Int())
		case "followers_count":
			out.FollowersCount = int(in.Int())
		case "friend_status":
			out.FriendStatus = int(in.Int())
		case "can_post":
			(out.CanPost).UnmarshalEasyJSON(in)
		case "can_see_all_posts":
			(out.CanSeeAllPosts).UnmarshalEasyJSON(in)
		case "can_see_audio":
			(out.CanSeeAudio).UnmarshalEasyJSON(in)
		case "can_send_friend_request":
			(out.CanSendFriendRequest).UnmarshalEasyJSON(in)
		case "can_write_private_message":
			(out.CanWritePrivateMessage).UnmarshalEasyJSON(in)
		case "has_mobile":
			(out.HasMobile).UnmarshalEasyJSON(in)
		case "has_photo":
			(out.HasPhoto).UnmarshalEasyJSON(in)
		case "is_favorite":
			(out.IsFavorite).UnmarshalEasyJSON(in)
		case "is_friend":
			(out.IsFriend).UnmarshalEasyJSON(in)
		case "is_hidden_from_feed":
			(out.IsHiddenFromFeed).UnmarshalEasyJSON(in)
		case "blacklisted":
			(out.Blacklisted).UnmarshalEasyJSON(in)
		case "blacklisted_by_me":
			(out.BlacklistedByMe).UnmarshalEasyJSON(in)
		case "is_closed":
			out.IsClosed = bool(in.Bool())
		case "can_access_closed":
			out.CanAccessClosed = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk19(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"first_name\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"last_name\":"
		out.RawString(prefix)
		out.String(string(in.LastName))
	}
	{
		const prefix string = ",\"deactivated\":"
		out.RawString(prefix)
		out.String(string(in.Deactivated))
	}
	{
		const prefix string = ",\"sex\":"
		out.RawString(prefix)
		out.Int(int(in.Sex))
	}
	{
		const prefix string = ",\"domain\":"
		out.RawString(prefix)
		out.String(string(in.Domain))
	}
	{
		const prefix string = ",\"maiden_name\":"
		out.RawString(prefix)
		out.String(string(in.MaidenName))
	}
	{
		const prefix string = ",\"nickname\":"
		out.RawString(prefix)
		out.String(string(in.Nickname))
	}
	{
		const prefix string = ",\"screen_name\":"
		out.RawString(prefix)
		out.String(string(in.ScreenName))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"bdate\":"
		out.RawString(prefix)
		out.String(string(in.BirthDate))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"books\":"
		out.RawString(prefix)
		out.String(string(in.Books))
	}
	{
		const prefix string = ",\"activites\":"
		out.RawString(prefix)
		out.String(string(in.Activites))
	}
	{
		const prefix string = ",\"interests\":"
		out.RawString(prefix)
		out.String(string(in.Interests))
	}
	{
		const prefix string = ",\"games\":"
		out.RawString(prefix)
		out.String(string(in.Games))
	}
	{
		const prefix string = ",\"home_town\":"
		out.RawString(prefix)
		out.String(string(in.HomeTown))
	}
	{
		const prefix string = ",\"movies\":"
		out.RawString(prefix)
		out.String(string(in.Movies))
	}
	{
		const prefix string = ",\"music\":"
		out.RawString(prefix)
		out.String(string(in.Music))
	}
	{
		const prefix string = ",\"quotes\":"
		out.RawString(prefix)
		out.String(string(in.Quotes))
	}
	{
		const prefix string = ",\"tv\":"
		out.RawString(prefix)
		out.String(string(in.TV))
	}
	{
		const prefix string = ",\"site\":"
		out.RawString(prefix)
		out.String(string(in.Site))
	}
	{
		const prefix string = ",\"verified\":"
		out.RawString(prefix)
		out.Int(int(in.Verified))
	}
	{
		const prefix string = ",\"last_seen\":"
		out.RawString(prefix)
		easyjsonC7452bc1Encode5(out, in.LastSeen)
	}
	{
		const prefix string = ",\"online\":"
		out.RawString(prefix)
		if in.Online == nil {
			out.RawString("null")
		} else {
			out.Int(int(*in.Online))
		}
	}
	{
		const prefix string = ",\"online_mobile\":"
		out.RawString(prefix)
		out.Bool(bool(in.OnlineMobile))
	}
	{
		const prefix string = ",\"online_app\":"
		out.RawString(prefix)
		out.Int(int(in.OnlineApp))
	}
	{
		const prefix string = ",\"photo_id\":"
		out.RawString(prefix)
		out.String(string(in.PhotoID))
	}
	{
		const prefix string = ",\"photo_max\":"
		out.RawString(prefix)
		out.String(string(in.PhotoMax))
	}
	{
		const prefix string = ",\"photo_max_orig\":"
		out.RawString(prefix)
		out.String(string(in.PhotoMaxOrig))
	}
	{
		const prefix string = ",\"career\":"
		out.RawString(prefix)
		if in.Career == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v41, v42 := range in.Career {
				if v41 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1Encode6(out, v42)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		if in.City == nil {
			out.RawString("null")
		} else {
			(*in.City).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix)
		if in.Country == nil {
			out.RawString("null")
		} else {
			(*in.Country).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"mobile_phone\":"
		out.RawString(prefix)
		out.String(string(in.MobilePhone))
	}
	{
		const prefix string = ",\"home_phone\":"
		out.RawString(prefix)
		out.String(string(in.HomePhone))
	}
	{
		const prefix string = ",\"crop_photo\":"
		out.RawString(prefix)
		if in.CropPhoto == nil {
			out.RawString("null")
		} else {
			(*in.CropPhoto).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"counters\":"
		out.RawString(prefix)
		if in.Counters == nil {
			out.RawString("null")
		} else {
			easyjsonC7452bc1Encode7(out, *in.Counters)
		}
	}
	{
		const prefix string = ",\"common_count\":"
		out.RawString(prefix)
		out.Int(int(in.CommonCount))
	}
	{
		const prefix string = ",\"followers_count\":"
		out.RawString(prefix)
		out.Int(int(in.FollowersCount))
	}
	{
		const prefix string = ",\"friend_status\":"
		out.RawString(prefix)
		out.Int(int(in.FriendStatus))
	}
	{
		const prefix string = ",\"can_post\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanPost))
	}
	{
		const prefix string = ",\"can_see_all_posts\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanSeeAllPosts))
	}
	{
		const prefix string = ",\"can_see_audio\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanSeeAudio))
	}
	{
		const prefix string = ",\"can_send_friend_request\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanSendFriendRequest))
	}
	{
		const prefix string = ",\"can_write_private_message\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanWritePrivateMessage))
	}
	{
		const prefix string = ",\"has_mobile\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasMobile))
	}
	{
		const prefix string = ",\"has_photo\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasPhoto))
	}
	{
		const prefix string = ",\"is_favorite\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsFavorite))
	}
	{
		const prefix string = ",\"is_friend\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsFriend))
	}
	{
		const prefix string = ",\"is_hidden_from_feed\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsHiddenFromFeed))
	}
	{
		const prefix string = ",\"blacklisted\":"
		out.RawString(prefix)
		out.Bool(bool(in.Blacklisted))
	}
	{
		const prefix string = ",\"blacklisted_by_me\":"
		out.RawString(prefix)
		out.Bool(bool(in.BlacklistedByMe))
	}
	{
		const prefix string = ",\"is_closed\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsClosed))
	}
	{
		const prefix string = ",\"can_access_closed\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanAccessClosed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk19(l, v)
}
func easyjsonC7452bc1Decode7(in *jlexer.Lexer, out *struct {
	Albums        int `json:"albums"`
	Videos        int `json:"videos"`
	Audios        int `json:"audios"`
	Photos        int `json:"photos"`
	Notes         int `json:"notes"`
	Friends       int `json:"friends"`
	Groups        int `json:"groups"`
	OnlineFriends int `json:"online_friends"`
	MutualFriends int `json:"mutual_friends"`
	UserVideos    int `json:"user_videos"`
	Followers     int `json:"followers"`
	Pages         int `json:"pages"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "albums":
			out.Albums = int(in.Int())
		case "videos":
			out.Videos = int(in.Int())
		case "audios":
			out.Audios = int(in.Int())
		case "photos":
			out.Photos = int(in.Int())
		case "notes":
			out.Notes = int(in.Int())
		case "friends":
			out.Friends = int(in.Int())
		case "groups":
			out.Groups = int(in.Int())
		case "online_friends":
			out.OnlineFriends = int(in.Int())
		case "mutual_friends":
			out.MutualFriends = int(in.Int())
		case "user_videos":
			out.UserVideos = int(in.Int())
		case "followers":
			out.Followers = int(in.Int())
		case "pages":
			out.Pages = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1Encode7(out *jwriter.Writer, in struct {
	Albums        int `json:"albums"`
	Videos        int `json:"videos"`
	Audios        int `json:"audios"`
	Photos        int `json:"photos"`
	Notes         int `json:"notes"`
	Friends       int `json:"friends"`
	Groups        int `json:"groups"`
	OnlineFriends int `json:"online_friends"`
	MutualFriends int `json:"mutual_friends"`
	UserVideos    int `json:"user_videos"`
	Followers     int `json:"followers"`
	Pages         int `json:"pages"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"albums\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Albums))
	}
	{
		const prefix string = ",\"videos\":"
		out.RawString(prefix)
		out.Int(int(in.Videos))
	}
	{
		const prefix string = ",\"audios\":"
		out.RawString(prefix)
		out.Int(int(in.Audios))
	}
	{
		const prefix string = ",\"photos\":"
		out.RawString(prefix)
		out.Int(int(in.Photos))
	}
	{
		const prefix string = ",\"notes\":"
		out.RawString(prefix)
		out.Int(int(in.Notes))
	}
	{
		const prefix string = ",\"friends\":"
		out.RawString(prefix)
		out.Int(int(in.Friends))
	}
	{
		const prefix string = ",\"groups\":"
		out.RawString(prefix)
		out.Int(int(in.Groups))
	}
	{
		const prefix string = ",\"online_friends\":"
		out.RawString(prefix)
		out.Int(int(in.OnlineFriends))
	}
	{
		const prefix string = ",\"mutual_friends\":"
		out.RawString(prefix)
		out.Int(int(in.MutualFriends))
	}
	{
		const prefix string = ",\"user_videos\":"
		out.RawString(prefix)
		out.Int(int(in.UserVideos))
	}
	{
		const prefix string = ",\"followers\":"
		out.RawString(prefix)
		out.Int(int(in.Followers))
	}
	{
		const prefix string = ",\"pages\":"
		out.RawString(prefix)
		out.Int(int(in.Pages))
	}
	out.RawByte('}')
}
func easyjsonC7452bc1Decode6(in *jlexer.Lexer, out *struct {
	GroupID   int    `json:"group_id"`
	Company   string `json:"company"`
	CountryID int    `json:"country_id"`
	CityID    int    `json:"city_id"`
	CityName  string `json:"city_name"`
	From      int    `json:"from"`
	Until     int    `json:"until"`
	Position  string `json:"position"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "group_id":
			out.GroupID = int(in.Int())
		case "company":
			out.Company = string(in.String())
		case "country_id":
			out.CountryID = int(in.Int())
		case "city_id":
			out.CityID = int(in.Int())
		case "city_name":
			out.CityName = string(in.String())
		case "from":
			out.From = int(in.Int())
		case "until":
			out.Until = int(in.Int())
		case "position":
			out.Position = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1Encode6(out *jwriter.Writer, in struct {
	GroupID   int    `json:"group_id"`
	Company   string `json:"company"`
	CountryID int    `json:"country_id"`
	CityID    int    `json:"city_id"`
	CityName  string `json:"city_name"`
	From      int    `json:"from"`
	Until     int    `json:"until"`
	Position  string `json:"position"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"group_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.GroupID))
	}
	{
		const prefix string = ",\"company\":"
		out.RawString(prefix)
		out.String(string(in.Company))
	}
	{
		const prefix string = ",\"country_id\":"
		out.RawString(prefix)
		out.Int(int(in.CountryID))
	}
	{
		const prefix string = ",\"city_id\":"
		out.RawString(prefix)
		out.Int(int(in.CityID))
	}
	{
		const prefix string = ",\"city_name\":"
		out.RawString(prefix)
		out.String(string(in.CityName))
	}
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix)
		out.Int(int(in.From))
	}
	{
		const prefix string = ",\"until\":"
		out.RawString(prefix)
		out.Int(int(in.Until))
	}
	{
		const prefix string = ",\"position\":"
		out.RawString(prefix)
		out.String(string(in.Position))
	}
	out.RawByte('}')
}
func easyjsonC7452bc1Decode5(in *jlexer.Lexer, out *struct {
	Time     int `json:"time"`
	Platform int `json:"platform"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			out.Time = int(in.Int())
		case "platform":
			out.Platform = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1Encode5(out *jwriter.Writer, in struct {
	Time     int `json:"time"`
	Platform int `json:"platform"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Time))
	}
	{
		const prefix string = ",\"platform\":"
		out.RawString(prefix)
		out.Int(int(in.Platform))
	}
	out.RawByte('}')
}
func easyjsonC7452bc1DecodeGithubComStek29Vk20(in *jlexer.Lexer, out *StoryVideo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "video":
			(out.Video).UnmarshalEasyJSON(in)
		case "is_private":
			(out.IsPrivate).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk20(out *jwriter.Writer, in StoryVideo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"video\":"
		out.RawString(prefix[1:])
		(in.Video).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"is_private\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPrivate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StoryVideo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StoryVideo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StoryVideo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StoryVideo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk20(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk21(in *jlexer.Lexer, out *Story) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "owner_id":
			out.OwnerID = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "seen":
			(out.Seen).UnmarshalEasyJSON(in)
		case "type":
			out.Type = string(in.String())
		case "photo":
			if in.IsNull() {
				in.Skip()
				out.Photo = nil
			} else {
				if out.Photo == nil {
					out.Photo = new(Photo)
				}
				(*out.Photo).UnmarshalEasyJSON(in)
			}
		case "video":
			if in.IsNull() {
				in.Skip()
				out.Video = nil
			} else {
				if out.Video == nil {
					out.Video = new(StoryVideo)
				}
				(*out.Video).UnmarshalEasyJSON(in)
			}
		case "views":
			out.Views = int(in.Int())
		case "can_see":
			(out.CanSee).UnmarshalEasyJSON(in)
		case "can_reply":
			(out.CanReply).UnmarshalEasyJSON(in)
		case "can_share":
			(out.CanShare).UnmarshalEasyJSON(in)
		case "can_comment":
			(out.CanComment).UnmarshalEasyJSON(in)
		case "is_deleted":
			out.IsDeleted = bool(in.Bool())
		case "is_expired":
			out.IsExpired = bool(in.Bool())
		case "access_key":
			out.AccessKey = string(in.String())
		case "parent_story_owner_id":
			out.ParentStoryOwnerID = int(in.Int())
		case "parent_story_id":
			out.ParentStoryID = int(in.Int())
		case "parent_story_access_key":
			out.ParentStoryAccessKey = string(in.String())
		case "parent_story":
			if in.IsNull() {
				in.Skip()
				out.ParentStory = nil
			} else {
				if out.ParentStory == nil {
					out.ParentStory = new(Story)
				}
				(*out.ParentStory).UnmarshalEasyJSON(in)
			}
		case "link":
			easyjsonC7452bc1Decode8(in, &out.Link)
		case "replies":
			if in.IsNull() {
				in.Skip()
				out.Replies = nil
			} else {
				in.Delim('[')
				if out.Replies == nil {
					if !in.IsDelim(']') {
						out.Replies = make([]struct {
							Count int `json:"count"`
							New   int `json:"new"`
						}, 0, 4)
					} else {
						out.Replies = []struct {
							Count int `json:"count"`
							New   int `json:"new"`
						}{}
					}
				} else {
					out.Replies = (out.Replies)[:0]
				}
				for !in.IsDelim(']') {
					var v43 struct {
						Count int `json:"count"`
						New   int `json:"new"`
					}
					easyjsonC7452bc1Decode9(in, &v43)
					out.Replies = append(out.Replies, v43)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk21(out *jwriter.Writer, in Story) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.OwnerID))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"seen\":"
		out.RawString(prefix)
		out.Bool(bool(in.Seen))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		if in.Photo == nil {
			out.RawString("null")
		} else {
			(*in.Photo).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"video\":"
		out.RawString(prefix)
		if in.Video == nil {
			out.RawString("null")
		} else {
			(*in.Video).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"views\":"
		out.RawString(prefix)
		out.Int(int(in.Views))
	}
	{
		const prefix string = ",\"can_see\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanSee))
	}
	{
		const prefix string = ",\"can_reply\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanReply))
	}
	{
		const prefix string = ",\"can_share\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanShare))
	}
	{
		const prefix string = ",\"can_comment\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanComment))
	}
	{
		const prefix string = ",\"is_deleted\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsDeleted))
	}
	{
		const prefix string = ",\"is_expired\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsExpired))
	}
	{
		const prefix string = ",\"access_key\":"
		out.RawString(prefix)
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"parent_story_owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.ParentStoryOwnerID))
	}
	{
		const prefix string = ",\"parent_story_id\":"
		out.RawString(prefix)
		out.Int(int(in.ParentStoryID))
	}
	{
		const prefix string = ",\"parent_story_access_key\":"
		out.RawString(prefix)
		out.String(string(in.ParentStoryAccessKey))
	}
	{
		const prefix string = ",\"parent_story\":"
		out.RawString(prefix)
		if in.ParentStory == nil {
			out.RawString("null")
		} else {
			(*in.ParentStory).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix)
		easyjsonC7452bc1Encode8(out, in.Link)
	}
	{
		const prefix string = ",\"replies\":"
		out.RawString(prefix)
		if in.Replies == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.Replies {
				if v44 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1Encode9(out, v45)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Story) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Story) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Story) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Story) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk21(l, v)
}
func easyjsonC7452bc1Decode9(in *jlexer.Lexer, out *struct {
	Count int `json:"count"`
	New   int `json:"new"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		case "new":
			out.New = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1Encode9(out *jwriter.Writer, in struct {
	Count int `json:"count"`
	New   int `json:"new"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"new\":"
		out.RawString(prefix)
		out.Int(int(in.New))
	}
	out.RawByte('}')
}
func easyjsonC7452bc1Decode8(in *jlexer.Lexer, out *struct {
	Text string `json:"text"`
	URL  string `json:"url"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1Encode8(out *jwriter.Writer, in struct {
	Text string `json:"text"`
	URL  string `json:"url"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix[1:])
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	out.RawByte('}')
}
func easyjsonC7452bc1DecodeGithubComStek29Vk22(in *jlexer.Lexer, out *Sticker) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "product_id":
			out.ProductID = int(in.Int())
		case "sticker_id":
			out.StickerID = int(in.Int())
		case "images":
			if in.IsNull() {
				in.Skip()
				out.Images = nil
			} else {
				in.Delim('[')
				if out.Images == nil {
					if !in.IsDelim(']') {
						out.Images = make([]struct {
							URL    string `json:"url"`
							Width  int    `json:"width"`
							Height int    `json:"height"`
						}, 0, 2)
					} else {
						out.Images = []struct {
							URL    string `json:"url"`
							Width  int    `json:"width"`
							Height int    `json:"height"`
						}{}
					}
				} else {
					out.Images = (out.Images)[:0]
				}
				for !in.IsDelim(']') {
					var v46 struct {
						URL    string `json:"url"`
						Width  int    `json:"width"`
						Height int    `json:"height"`
					}
					easyjsonC7452bc1Decode10(in, &v46)
					out.Images = append(out.Images, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "images_with_background":
			if in.IsNull() {
				in.Skip()
				out.ImagesWithBackground = nil
			} else {
				in.Delim('[')
				if out.ImagesWithBackground == nil {
					if !in.IsDelim(']') {
						out.ImagesWithBackground = make([]struct {
							URL    string `json:"url"`
							Width  int    `json:"width"`
							Height int    `json:"height"`
						}, 0, 2)
					} else {
						out.ImagesWithBackground = []struct {
							URL    string `json:"url"`
							Width  int    `json:"width"`
							Height int    `json:"height"`
						}{}
					}
				} else {
					out.ImagesWithBackground = (out.ImagesWithBackground)[:0]
				}
				for !in.IsDelim(']') {
					var v47 struct {
						URL    string `json:"url"`
						Width  int    `json:"width"`
						Height int    `json:"height"`
					}
					easyjsonC7452bc1Decode10(in, &v47)
					out.ImagesWithBackground = append(out.ImagesWithBackground, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk22(out *jwriter.Writer, in Sticker) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"product_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ProductID))
	}
	{
		const prefix string = ",\"sticker_id\":"
		out.RawString(prefix)
		out.Int(int(in.StickerID))
	}
	{
		const prefix string = ",\"images\":"
		out.RawString(prefix)
		if in.Images == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v48, v49 := range in.Images {
				if v48 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1Encode10(out, v49)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"images_with_background\":"
		out.RawString(prefix)
		if in.ImagesWithBackground == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v50, v51 := range in.ImagesWithBackground {
				if v50 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1Encode10(out, v51)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Sticker) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Sticker) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Sticker) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Sticker) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk22(l, v)
}
func easyjsonC7452bc1Decode10(in *jlexer.Lexer, out *struct {
	URL    string `json:"url"`
	Width  int    `json:"width"`
	Height int    `json:"height"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "width":
			out.Width = int(in.Int())
		case "height":
			out.Height = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1Encode10(out *jwriter.Writer, in struct {
	URL    string `json:"url"`
	Width  int    `json:"width"`
	Height int    `json:"height"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix)
		out.Int(int(in.Width))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	out.RawByte('}')
}
func easyjsonC7452bc1DecodeGithubComStek29Vk23(in *jlexer.Lexer, out *Post) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "owner_id":
			out.OwnerID = int(in.Int())
		case "from_id":
			out.FromID = int(in.Int())
		case "access_key":
			out.AccessKey = string(in.String())
		case "created_by":
			out.CreatedBy = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_owner_id":
			out.ReplyOwnerID = int(in.Int())
		case "reply_post_id":
			out.ReplyPostID = int(in.Int())
		case "friends_only":
			(out.FriendsOnly).UnmarshalEasyJSON(in)
		case "comments":
			if in.IsNull() {
				in.Skip()
				out.Comments = nil
			} else {
				if out.Comments == nil {
					out.Comments = new(struct {
						Count         int     `json:"count"`
						CanPost       BoolInt `json:"can_post"`
						GroupsCanPost BoolInt `json:"groups_can_post"`
						CanClose      BoolInt `json:"can_close"`
						CanOpen       BoolInt `json:"can_open"`
					})
				}
				easyjsonC7452bc1Decode(in, out.Comments)
			}
		case "likes":
			if in.IsNull() {
				in.Skip()
				out.Likes = nil
			} else {
				if out.Likes == nil {
					out.Likes = new(struct {
						Count      int     `json:"count"`
						UserLikes  BoolInt `json:"user_likes"`
						CanLike    BoolInt `json:"can_like"`
						CanPublish BoolInt `json:"can_publish"`
					})
				}
				easyjsonC7452bc1Decode1(in, out.Likes)
			}
		case "reposts":
			if in.IsNull() {
				in.Skip()
				out.Reposts = nil
			} else {
				if out.Reposts == nil {
					out.Reposts = new(struct {
						Count        int     `json:"count"`
						UserReposted BoolInt `json:"user_reposted"`
					})
				}
				easyjsonC7452bc1Decode2(in, out.Reposts)
			}
		case "views":
			if in.IsNull() {
				in.Skip()
				out.Views = nil
			} else {
				if out.Views == nil {
					out.Views = new(struct {
						Count int `json:"count"`
					})
				}
				easyjsonC7452bc1Decode3(in, out.Views)
			}
		case "post_type":
			out.PostType = string(in.String())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v52 Attachment
					if data := in.Raw(); in.Ok() {
						in.AddError((v52).UnmarshalJSON(data))
					}
					out.Attachments = append(out.Attachments, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "signer_id":
			out.SignerID = int(in.Int())
		case "copy_history":
			if in.IsNull() {
				in.Skip()
				out.CopyHistory = nil
			} else {
				in.Delim('[')
				if out.CopyHistory == nil {
					if !in.IsDelim(']') {
						out.CopyHistory = make([]Post, 0, 0)
					} else {
						out.CopyHistory = []Post{}
					}
				} else {
					out.CopyHistory = (out.CopyHistory)[:0]
				}
				for !in.IsDelim(']') {
					var v53 Post
					(v53).UnmarshalEasyJSON(in)
					out.CopyHistory = append(out.CopyHistory, v53)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "can_pin":
			(out.CanPin).UnmarshalEasyJSON(in)
		case "can_delete":
			(out.CanDelete).UnmarshalEasyJSON(in)
		case "can_edit":
			(out.CanEdit).UnmarshalEasyJSON(in)
		case "is_pinned":
			(out.IsPinned).UnmarshalEasyJSON(in)
		case "marked_as_ads":
			(out.MarkedAsAds).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk23(out *jwriter.Writer, in Post) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.OwnerID))
	}
	{
		const prefix string = ",\"from_id\":"
		out.RawString(prefix)
		out.Int(int(in.FromID))
	}
	{
		const prefix string = ",\"access_key\":"
		out.RawString(prefix)
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"created_by\":"
		out.RawString(prefix)
		out.Int(int(in.CreatedBy))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyOwnerID))
	}
	{
		const prefix string = ",\"reply_post_id\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyPostID))
	}
	{
		const prefix string = ",\"friends_only\":"
		out.RawString(prefix)
		out.Bool(bool(in.FriendsOnly))
	}
	{
		const prefix string = ",\"comments\":"
		out.RawString(prefix)
		if in.Comments == nil {
			out.RawString("null")
		} else {
			easyjsonC7452bc1Encode(out, *in.Comments)
		}
	}
	{
		const prefix string = ",\"likes\":"
		out.RawString(prefix)
		if in.Likes == nil {
			out.RawString("null")
		} else {
			easyjsonC7452bc1Encode1(out, *in.Likes)
		}
	}
	{
		const prefix string = ",\"reposts\":"
		out.RawString(prefix)
		if in.Reposts == nil {
			out.RawString("null")
		} else {
			easyjsonC7452bc1Encode2(out, *in.Reposts)
		}
	}
	{
		const prefix string = ",\"views\":"
		out.RawString(prefix)
		if in.Views == nil {
			out.RawString("null")
		} else {
			easyjsonC7452bc1Encode3(out, *in.Views)
		}
	}
	{
		const prefix string = ",\"post_type\":"
		out.RawString(prefix)
		out.String(string(in.PostType))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v54, v55 := range in.Attachments {
				if v54 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1EncodeGithubComStek29Vk2(out, v55)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"signer_id\":"
		out.RawString(prefix)
		out.Int(int(in.SignerID))
	}
	{
		const prefix string = ",\"copy_history\":"
		out.RawString(prefix)
		if in.CopyHistory == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v56, v57 := range in.CopyHistory {
				if v56 > 0 {
					out.RawByte(',')
				}
				(v57).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"can_pin\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanPin))
	}
	{
		const prefix string = ",\"can_delete\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanDelete))
	}
	{
		const prefix string = ",\"can_edit\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanEdit))
	}
	{
		const prefix string = ",\"is_pinned\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsPinned))
	}
	{
		const prefix string = ",\"marked_as_ads\":"
		out.RawString(prefix)
		out.Bool(bool(in.MarkedAsAds))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Post) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Post) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Post) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Post) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk23(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk24(in *jlexer.Lexer, out *PollVoteNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "owner_id":
			out.OwnerID = int(in.Int())
		case "poll_id":
			out.PollID = int(in.Int())
		case "option_id":
			out.OptionID = int(in.Int())
		case "user_id":
			out.UserID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk24(out *jwriter.Writer, in PollVoteNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.OwnerID))
	}
	{
		const prefix string = ",\"poll_id\":"
		out.RawString(prefix)
		out.Int(int(in.PollID))
	}
	{
		const prefix string = ",\"option_id\":"
		out.RawString(prefix)
		out.Int(int(in.OptionID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PollVoteNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PollVoteNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PollVoteNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PollVoteNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk24(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk25(in *jlexer.Lexer, out *PollAnswer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "votes":
			out.Votes = int(in.Int())
		case "rate":
			out.Rate = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk25(out *jwriter.Writer, in PollAnswer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"votes\":"
		out.RawString(prefix)
		out.Int(int(in.Votes))
	}
	{
		const prefix string = ",\"rate\":"
		out.RawString(prefix)
		out.Float32(float32(in.Rate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PollAnswer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PollAnswer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PollAnswer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PollAnswer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk25(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk26(in *jlexer.Lexer, out *Poll) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "owner_id":
			out.OwnerID = int(in.Int())
		case "author_id":
			out.AuthorID = int(in.Int())
		case "created":
			out.Created = int(in.Int())
		case "question":
			out.Question = string(in.String())
		case "votes":
			out.Votes = int(in.Int())
		case "answer_ids":
			if in.IsNull() {
				in.Skip()
				out.AnswerIDs = nil
			} else {
				in.Delim('[')
				if out.AnswerIDs == nil {
					if !in.IsDelim(']') {
						out.AnswerIDs = make([]int, 0, 8)
					} else {
						out.AnswerIDs = []int{}
					}
				} else {
					out.AnswerIDs = (out.AnswerIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v58 int
					v58 = int(in.Int())
					out.AnswerIDs = append(out.AnswerIDs, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "asnwers":
			if in.IsNull() {
				in.Skip()
				out.Asnwers = nil
			} else {
				in.Delim('[')
				if out.Asnwers == nil {
					if !in.IsDelim(']') {
						out.Asnwers = make([]PollAnswer, 0, 1)
					} else {
						out.Asnwers = []PollAnswer{}
					}
				} else {
					out.Asnwers = (out.Asnwers)[:0]
				}
				for !in.IsDelim(']') {
					var v59 PollAnswer
					(v59).UnmarshalEasyJSON(in)
					out.Asnwers = append(out.Asnwers, v59)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "anonymous":
			(out.Anonymous).UnmarshalEasyJSON(in)
		case "multiple":
			(out.Multiple).UnmarshalEasyJSON(in)
		case "end_date":
			out.EndDate = int(in.Int())
		case "closed":
			(out.Closed).UnmarshalEasyJSON(in)
		case "is_board":
			(out.IsBoard).UnmarshalEasyJSON(in)
		case "can_edit":
			(out.CanEdit).UnmarshalEasyJSON(in)
		case "can_vote":
			(out.CanVote).UnmarshalEasyJSON(in)
		case "can_report":
			(out.CanReport).UnmarshalEasyJSON(in)
		case "can_share":
			(out.CanShare).UnmarshalEasyJSON(in)
		case "photo":
			if in.IsNull() {
				in.Skip()
				out.Photo = nil
			} else {
				if out.Photo == nil {
					out.Photo = new(Photo)
				}
				(*out.Photo).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk26(out *jwriter.Writer, in Poll) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.OwnerID))
	}
	{
		const prefix string = ",\"author_id\":"
		out.RawString(prefix)
		out.Int(int(in.AuthorID))
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.Int(int(in.Created))
	}
	{
		const prefix string = ",\"question\":"
		out.RawString(prefix)
		out.String(string(in.Question))
	}
	{
		const prefix string = ",\"votes\":"
		out.RawString(prefix)
		out.Int(int(in.Votes))
	}
	{
		const prefix string = ",\"answer_ids\":"
		out.RawString(prefix)
		if in.AnswerIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v60, v61 := range in.AnswerIDs {
				if v60 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v61))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"asnwers\":"
		out.RawString(prefix)
		if in.Asnwers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v62, v63 := range in.Asnwers {
				if v62 > 0 {
					out.RawByte(',')
				}
				(v63).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"anonymous\":"
		out.RawString(prefix)
		out.Bool(bool(in.Anonymous))
	}
	{
		const prefix string = ",\"multiple\":"
		out.RawString(prefix)
		out.Bool(bool(in.Multiple))
	}
	{
		const prefix string = ",\"end_date\":"
		out.RawString(prefix)
		out.Int(int(in.EndDate))
	}
	{
		const prefix string = ",\"closed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Closed))
	}
	{
		const prefix string = ",\"is_board\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsBoard))
	}
	{
		const prefix string = ",\"can_edit\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanEdit))
	}
	{
		const prefix string = ",\"can_vote\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanVote))
	}
	{
		const prefix string = ",\"can_report\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanReport))
	}
	{
		const prefix string = ",\"can_share\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanShare))
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		if in.Photo == nil {
			out.RawString("null")
		} else {
			(*in.Photo).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Poll) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Poll) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Poll) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Poll) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk26(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk27(in *jlexer.Lexer, out *Place) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "latitude":
			out.Latitude = float32(in.Float32())
		case "longitude":
			out.Longitude = float32(in.Float32())
		case "created":
			out.Created = int(in.Int())
		case "icon":
			out.Icon = string(in.String())
		case "checkins":
			out.Checkins = int(in.Int())
		case "type":
			out.Type = string(in.String())
		case "country":
			out.Country = int(in.Int())
		case "city":
			out.City = int(in.Int())
		case "place":
			out.Place = string(in.String())
		case "distance":
			out.Distance = int(in.Int())
		case "group_id":
			out.GroupID = int(in.Int())
		case "group_photo":
			out.GroupPhoto = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk27(out *jwriter.Writer, in Place) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"latitude\":"
		out.RawString(prefix)
		out.Float32(float32(in.Latitude))
	}
	{
		const prefix string = ",\"longitude\":"
		out.RawString(prefix)
		out.Float32(float32(in.Longitude))
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.Int(int(in.Created))
	}
	{
		const prefix string = ",\"icon\":"
		out.RawString(prefix)
		out.String(string(in.Icon))
	}
	{
		const prefix string = ",\"checkins\":"
		out.RawString(prefix)
		out.Int(int(in.Checkins))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix)
		out.Int(int(in.Country))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.Int(int(in.City))
	}
	{
		const prefix string = ",\"place\":"
		out.RawString(prefix)
		out.String(string(in.Place))
	}
	{
		const prefix string = ",\"distance\":"
		out.RawString(prefix)
		out.Int(int(in.Distance))
	}
	{
		const prefix string = ",\"group_id\":"
		out.RawString(prefix)
		out.Int(int(in.GroupID))
	}
	{
		const prefix string = ",\"group_photo\":"
		out.RawString(prefix)
		out.String(string(in.GroupPhoto))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Place) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Place) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Place) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Place) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk27(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk28(in *jlexer.Lexer, out *PhotoSize) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "width":
			(out.Width).UnmarshalEasyJSON(in)
		case "height":
			(out.Height).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk28(out *jwriter.Writer, in PhotoSize) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix)
		out.Int(int(in.Width))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PhotoSize) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PhotoSize) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PhotoSize) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PhotoSize) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk28(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk29(in *jlexer.Lexer, out *PhotoNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "album_id":
			out.AlbumID = int(in.Int())
		case "owner_id":
			out.OwnerID = int(in.Int())
		case "user_id":
			out.UserID = int(in.Int())
		case "access_key":
			out.AccessKey = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "date":
			out.Date = int(in.Int())
		case "sizes":
			if in.IsNull() {
				in.Skip()
				out.Sizes = nil
			} else {
				in.Delim('[')
				if out.Sizes == nil {
					if !in.IsDelim(']') {
						out.Sizes = make([]PhotoSize, 0, 1)
					} else {
						out.Sizes = []PhotoSize{}
					}
				} else {
					out.Sizes = (out.Sizes)[:0]
				}
				for !in.IsDelim(']') {
					var v64 PhotoSize
					(v64).UnmarshalEasyJSON(in)
					out.Sizes = append(out.Sizes, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "width":
			out.Width = int(in.Int())
		case "height":
			out.Height = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk29(out *jwriter.Writer, in PhotoNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"album_id\":"
		out.RawString(prefix)
		out.Int(int(in.AlbumID))
	}
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.OwnerID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"access_key\":"
		out.RawString(prefix)
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"sizes\":"
		out.RawString(prefix)
		if in.Sizes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v65, v66 := range in.Sizes {
				if v65 > 0 {
					out.RawByte(',')
				}
				(v66).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix)
		out.Int(int(in.Width))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PhotoNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PhotoNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PhotoNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PhotoNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk29(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk30(in *jlexer.Lexer, out *PhotoCommentRestore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "photo_id":
			out.PhotoID = int(in.Int())
		case "photo_owner_id":
			out.PhotoOwnerID = int(in.Int())
		case "id":
			out.ID = int(in.Int())
		case "from_id":
			out.FromID = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_to_user":
			out.ReplyToUser = int(in.Int())
		case "reply_to_comment":
			out.ReplyToComment = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v67 Attachment
					if data := in.Raw(); in.Ok() {
						in.AddError((v67).UnmarshalJSON(data))
					}
					out.Attachments = append(out.Attachments, v67)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk30(out *jwriter.Writer, in PhotoCommentRestore) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"photo_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PhotoID))
	}
	{
		const prefix string = ",\"photo_owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.PhotoOwnerID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"from_id\":"
		out.RawString(prefix)
		out.Int(int(in.FromID))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_to_user\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyToUser))
	}
	{
		const prefix string = ",\"reply_to_comment\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyToComment))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v68, v69 := range in.Attachments {
				if v68 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1EncodeGithubComStek29Vk2(out, v69)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PhotoCommentRestore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PhotoCommentRestore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PhotoCommentRestore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PhotoCommentRestore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk30(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk31(in *jlexer.Lexer, out *PhotoCommentNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "photo_id":
			out.PhotoID = int(in.Int())
		case "photo_owner_id":
			out.PhotoOwnerID = int(in.Int())
		case "id":
			out.ID = int(in.Int())
		case "from_id":
			out.FromID = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_to_user":
			out.ReplyToUser = int(in.Int())
		case "reply_to_comment":
			out.ReplyToComment = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v70 Attachment
					if data := in.Raw(); in.Ok() {
						in.AddError((v70).UnmarshalJSON(data))
					}
					out.Attachments = append(out.Attachments, v70)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk31(out *jwriter.Writer, in PhotoCommentNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"photo_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PhotoID))
	}
	{
		const prefix string = ",\"photo_owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.PhotoOwnerID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"from_id\":"
		out.RawString(prefix)
		out.Int(int(in.FromID))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_to_user\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyToUser))
	}
	{
		const prefix string = ",\"reply_to_comment\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyToComment))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v71, v72 := range in.Attachments {
				if v71 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1EncodeGithubComStek29Vk2(out, v72)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PhotoCommentNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PhotoCommentNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PhotoCommentNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PhotoCommentNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk31(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk32(in *jlexer.Lexer, out *PhotoCommentEdit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "photo_id":
			out.PhotoID = int(in.Int())
		case "photo_owner_id":
			out.PhotoOwnerID = int(in.Int())
		case "id":
			out.ID = int(in.Int())
		case "from_id":
			out.FromID = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_to_user":
			out.ReplyToUser = int(in.Int())
		case "reply_to_comment":
			out.ReplyToComment = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v73 Attachment
					if data := in.Raw(); in.Ok() {
						in.AddError((v73).UnmarshalJSON(data))
					}
					out.Attachments = append(out.Attachments, v73)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk32(out *jwriter.Writer, in PhotoCommentEdit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"photo_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PhotoID))
	}
	{
		const prefix string = ",\"photo_owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.PhotoOwnerID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"from_id\":"
		out.RawString(prefix)
		out.Int(int(in.FromID))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_to_user\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyToUser))
	}
	{
		const prefix string = ",\"reply_to_comment\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyToComment))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v74, v75 := range in.Attachments {
				if v74 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1EncodeGithubComStek29Vk2(out, v75)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PhotoCommentEdit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PhotoCommentEdit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PhotoCommentEdit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PhotoCommentEdit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk32(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk33(in *jlexer.Lexer, out *PhotoCommentDelete) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "owner_id":
			out.OwnerID = int(in.Int())
		case "id":
			out.ID = int(in.Int())
		case "user_id":
			out.UserID = int(in.Int())
		case "deleter_id":
			out.DeleterID = int(in.Int())
		case "photo_id":
			out.PhotoID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk33(out *jwriter.Writer, in PhotoCommentDelete) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.OwnerID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"deleter_id\":"
		out.RawString(prefix)
		out.Int(int(in.DeleterID))
	}
	{
		const prefix string = ",\"photo_id\":"
		out.RawString(prefix)
		out.Int(int(in.PhotoID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PhotoCommentDelete) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PhotoCommentDelete) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PhotoCommentDelete) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PhotoCommentDelete) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk33(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk34(in *jlexer.Lexer, out *Photo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "album_id":
			out.AlbumID = int(in.Int())
		case "owner_id":
			out.OwnerID = int(in.Int())
		case "user_id":
			out.UserID = int(in.Int())
		case "access_key":
			out.AccessKey = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "date":
			out.Date = int(in.Int())
		case "sizes":
			if in.IsNull() {
				in.Skip()
				out.Sizes = nil
			} else {
				in.Delim('[')
				if out.Sizes == nil {
					if !in.IsDelim(']') {
						out.Sizes = make([]PhotoSize, 0, 1)
					} else {
						out.Sizes = []PhotoSize{}
					}
				} else {
					out.Sizes = (out.Sizes)[:0]
				}
				for !in.IsDelim(']') {
					var v76 PhotoSize
					(v76).UnmarshalEasyJSON(in)
					out.Sizes = append(out.Sizes, v76)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "width":
			out.Width = int(in.Int())
		case "height":
			out.Height = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk34(out *jwriter.Writer, in Photo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"album_id\":"
		out.RawString(prefix)
		out.Int(int(in.AlbumID))
	}
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.OwnerID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"access_key\":"
		out.RawString(prefix)
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"sizes\":"
		out.RawString(prefix)
		if in.Sizes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v77, v78 := range in.Sizes {
				if v77 > 0 {
					out.RawByte(',')
				}
				(v78).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix)
		out.Int(int(in.Width))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Photo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Photo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Photo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Photo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk34(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk35(in *jlexer.Lexer, out *Page) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "group_id":
			out.GroupID = int(in.Int())
		case "creator_id":
			out.CreatorID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "current_user_can_edit":
			(out.CurrentUserCanEdit).UnmarshalEasyJSON(in)
		case "current_user_can_edit_access":
			(out.CurrentUserCanEditAccess).UnmarshalEasyJSON(in)
		case "who_can_view":
			out.WhoCanView = int(in.Int())
		case "who_can_edit":
			out.WhoCanEdit = int(in.Int())
		case "edited":
			out.Edited = int(in.Int())
		case "created":
			out.Created = int(in.Int())
		case "editor_id":
			out.EditorID = int(in.Int())
		case "views":
			out.Views = int(in.Int())
		case "parent":
			out.Parent = string(in.String())
		case "parent2":
			out.Parent2 = string(in.String())
		case "source":
			out.Source = string(in.String())
		case "html":
			out.HTML = string(in.String())
		case "view_url":
			out.ViewURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk35(out *jwriter.Writer, in Page) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"group_id\":"
		out.RawString(prefix)
		out.Int(int(in.GroupID))
	}
	{
		const prefix string = ",\"creator_id\":"
		out.RawString(prefix)
		out.Int(int(in.CreatorID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"current_user_can_edit\":"
		out.RawString(prefix)
		out.Bool(bool(in.CurrentUserCanEdit))
	}
	{
		const prefix string = ",\"current_user_can_edit_access\":"
		out.RawString(prefix)
		out.Bool(bool(in.CurrentUserCanEditAccess))
	}
	{
		const prefix string = ",\"who_can_view\":"
		out.RawString(prefix)
		out.Int(int(in.WhoCanView))
	}
	{
		const prefix string = ",\"who_can_edit\":"
		out.RawString(prefix)
		out.Int(int(in.WhoCanEdit))
	}
	{
		const prefix string = ",\"edited\":"
		out.RawString(prefix)
		out.Int(int(in.Edited))
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.Int(int(in.Created))
	}
	{
		const prefix string = ",\"editor_id\":"
		out.RawString(prefix)
		out.Int(int(in.EditorID))
	}
	{
		const prefix string = ",\"views\":"
		out.RawString(prefix)
		out.Int(int(in.Views))
	}
	{
		const prefix string = ",\"parent\":"
		out.RawString(prefix)
		out.String(string(in.Parent))
	}
	{
		const prefix string = ",\"parent2\":"
		out.RawString(prefix)
		out.String(string(in.Parent2))
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"html\":"
		out.RawString(prefix)
		out.String(string(in.HTML))
	}
	{
		const prefix string = ",\"view_url\":"
		out.RawString(prefix)
		out.String(string(in.ViewURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Page) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Page) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Page) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Page) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk35(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk36(in *jlexer.Lexer, out *Note) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "owner_id":
			out.OwnerID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "date":
			out.Date = int(in.Int())
		case "comments":
			out.Comments = int(in.Int())
		case "read_comments":
			out.ReadComments = int(in.Int())
		case "view_url":
			out.ViewURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk36(out *jwriter.Writer, in Note) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.OwnerID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"comments\":"
		out.RawString(prefix)
		out.Int(int(in.Comments))
	}
	{
		const prefix string = ",\"read_comments\":"
		out.RawString(prefix)
		out.Int(int(in.ReadComments))
	}
	{
		const prefix string = ",\"view_url\":"
		out.RawString(prefix)
		out.String(string(in.ViewURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Note) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Note) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Note) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Note) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk36(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk37(in *jlexer.Lexer, out *NewsfeedItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "source_id":
			out.SourceID = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk37(out *jwriter.Writer, in NewsfeedItem) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != "" {
		const prefix string = ",\"type\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.SourceID != 0 {
		const prefix string = ",\"source_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.SourceID))
	}
	if in.Date != 0 {
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Date))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewsfeedItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewsfeedItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewsfeedItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewsfeedItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk37(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk38(in *jlexer.Lexer, out *NewVKPayTransaction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk38(out *jwriter.Writer, in NewVKPayTransaction) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewVKPayTransaction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewVKPayTransaction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewVKPayTransaction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewVKPayTransaction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk38(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk39(in *jlexer.Lexer, out *MiniLink) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "url":
			out.URL = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "desc":
			out.Description = string(in.String())
		case "photo_50":
			out.Photo50 = string(in.String())
		case "photo_100":
			out.Photo100 = string(in.String())
		case "photo_200":
			out.Photo200 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk39(out *jwriter.Writer, in MiniLink) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"desc\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"photo_50\":"
		out.RawString(prefix)
		out.String(string(in.Photo50))
	}
	{
		const prefix string = ",\"photo_100\":"
		out.RawString(prefix)
		out.String(string(in.Photo100))
	}
	{
		const prefix string = ",\"photo_200\":"
		out.RawString(prefix)
		out.String(string(in.Photo200))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MiniLink) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MiniLink) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MiniLink) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MiniLink) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk39(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk40(in *jlexer.Lexer, out *MessageTypingState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "state":
			out.State = string(in.String())
		case "from_id":
			out.FromID = int(in.Int())
		case "to_id":
			out.ToID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk40(out *jwriter.Writer, in MessageTypingState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix[1:])
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"from_id\":"
		out.RawString(prefix)
		out.Int(int(in.FromID))
	}
	{
		const prefix string = ",\"to_id\":"
		out.RawString(prefix)
		out.Int(int(in.ToID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageTypingState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk40(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageTypingState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk40(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageTypingState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk40(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageTypingState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk40(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk41(in *jlexer.Lexer, out *MessageReply) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "conversation_message_id":
			out.ConversationID = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "peer_id":
			out.PeerID = int(in.Int())
		case "from_id":
			out.FromID = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "random_id":
			out.RandomID = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v79 Attachment
					if data := in.Raw(); in.Ok() {
						in.AddError((v79).UnmarshalJSON(data))
					}
					out.Attachments = append(out.Attachments, v79)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "important":
			out.Important = bool(in.Bool())
		case "payload":
			out.Payload = string(in.String())
		case "fwd_messages":
			if in.IsNull() {
				in.Skip()
				out.ForwardedMessages = nil
			} else {
				in.Delim('[')
				if out.ForwardedMessages == nil {
					if !in.IsDelim(']') {
						out.ForwardedMessages = make([]Message, 0, 0)
					} else {
						out.ForwardedMessages = []Message{}
					}
				} else {
					out.ForwardedMessages = (out.ForwardedMessages)[:0]
				}
				for !in.IsDelim(']') {
					var v80 Message
					(v80).UnmarshalEasyJSON(in)
					out.ForwardedMessages = append(out.ForwardedMessages, v80)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "action":
			if in.IsNull() {
				in.Skip()
				out.Action = nil
			} else {
				if out.Action == nil {
					out.Action = new(struct {
						Type     string `json:"type"`
						MemberID int    `json:"member_id"`
						Text     string `json:"text"`
						Email    string `json:"email"`
						Photo    struct {
							Photo50  string `json:"photo_50"`
							Photo100 string `json:"photo_100"`
							Photo200 string `json:"photo_200"`
						} `json:"photo"`
					})
				}
				easyjsonC7452bc1Decode11(in, out.Action)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk41(out *jwriter.Writer, in MessageReply) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"conversation_message_id\":"
		out.RawString(prefix)
		out.Int(int(in.ConversationID))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"peer_id\":"
		out.RawString(prefix)
		out.Int(int(in.PeerID))
	}
	{
		const prefix string = ",\"from_id\":"
		out.RawString(prefix)
		out.Int(int(in.FromID))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"random_id\":"
		out.RawString(prefix)
		out.Int(int(in.RandomID))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v81, v82 := range in.Attachments {
				if v81 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1EncodeGithubComStek29Vk2(out, v82)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"important\":"
		out.RawString(prefix)
		out.Bool(bool(in.Important))
	}
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		out.String(string(in.Payload))
	}
	{
		const prefix string = ",\"fwd_messages\":"
		out.RawString(prefix)
		if in.ForwardedMessages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v83, v84 := range in.ForwardedMessages {
				if v83 > 0 {
					out.RawByte(',')
				}
				(v84).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix)
		if in.Action == nil {
			out.RawString("null")
		} else {
			easyjsonC7452bc1Encode11(out, *in.Action)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageReply) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageReply) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageReply) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageReply) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk41(l, v)
}
func easyjsonC7452bc1Decode11(in *jlexer.Lexer, out *struct {
	Type     string `json:"type"`
	MemberID int    `json:"member_id"`
	Text     string `json:"text"`
	Email    string `json:"email"`
	Photo    struct {
		Photo50  string `json:"photo_50"`
		Photo100 string `json:"photo_100"`
		Photo200 string `json:"photo_200"`
	} `json:"photo"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "member_id":
			out.MemberID = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "photo":
			easyjsonC7452bc1Decode12(in, &out.Photo)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1Encode11(out *jwriter.Writer, in struct {
	Type     string `json:"type"`
	MemberID int    `json:"member_id"`
	Text     string `json:"text"`
	Email    string `json:"email"`
	Photo    struct {
		Photo50  string `json:"photo_50"`
		Photo100 string `json:"photo_100"`
		Photo200 string `json:"photo_200"`
	} `json:"photo"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"member_id\":"
		out.RawString(prefix)
		out.Int(int(in.MemberID))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		easyjsonC7452bc1Encode12(out, in.Photo)
	}
	out.RawByte('}')
}
func easyjsonC7452bc1Decode12(in *jlexer.Lexer, out *struct {
	Photo50  string `json:"photo_50"`
	Photo100 string `json:"photo_100"`
	Photo200 string `json:"photo_200"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "photo_50":
			out.Photo50 = string(in.String())
		case "photo_100":
			out.Photo100 = string(in.String())
		case "photo_200":
			out.Photo200 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1Encode12(out *jwriter.Writer, in struct {
	Photo50  string `json:"photo_50"`
	Photo100 string `json:"photo_100"`
	Photo200 string `json:"photo_200"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"photo_50\":"
		out.RawString(prefix[1:])
		out.String(string(in.Photo50))
	}
	{
		const prefix string = ",\"photo_100\":"
		out.RawString(prefix)
		out.String(string(in.Photo100))
	}
	{
		const prefix string = ",\"photo_200\":"
		out.RawString(prefix)
		out.String(string(in.Photo200))
	}
	out.RawByte('}')
}
func easyjsonC7452bc1DecodeGithubComStek29Vk42(in *jlexer.Lexer, out *MessageNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "conversation_message_id":
			out.ConversationID = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "peer_id":
			out.PeerID = int(in.Int())
		case "from_id":
			out.FromID = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "random_id":
			out.RandomID = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v85 Attachment
					if data := in.Raw(); in.Ok() {
						in.AddError((v85).UnmarshalJSON(data))
					}
					out.Attachments = append(out.Attachments, v85)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "important":
			out.Important = bool(in.Bool())
		case "payload":
			out.Payload = string(in.String())
		case "fwd_messages":
			if in.IsNull() {
				in.Skip()
				out.ForwardedMessages = nil
			} else {
				in.Delim('[')
				if out.ForwardedMessages == nil {
					if !in.IsDelim(']') {
						out.ForwardedMessages = make([]Message, 0, 0)
					} else {
						out.ForwardedMessages = []Message{}
					}
				} else {
					out.ForwardedMessages = (out.ForwardedMessages)[:0]
				}
				for !in.IsDelim(']') {
					var v86 Message
					(v86).UnmarshalEasyJSON(in)
					out.ForwardedMessages = append(out.ForwardedMessages, v86)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "action":
			if in.IsNull() {
				in.Skip()
				out.Action = nil
			} else {
				if out.Action == nil {
					out.Action = new(struct {
						Type     string `json:"type"`
						MemberID int    `json:"member_id"`
						Text     string `json:"text"`
						Email    string `json:"email"`
						Photo    struct {
							Photo50  string `json:"photo_50"`
							Photo100 string `json:"photo_100"`
							Photo200 string `json:"photo_200"`
						} `json:"photo"`
					})
				}
				easyjsonC7452bc1Decode11(in, out.Action)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk42(out *jwriter.Writer, in MessageNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"conversation_message_id\":"
		out.RawString(prefix)
		out.Int(int(in.ConversationID))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"peer_id\":"
		out.RawString(prefix)
		out.Int(int(in.PeerID))
	}
	{
		const prefix string = ",\"from_id\":"
		out.RawString(prefix)
		out.Int(int(in.FromID))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"random_id\":"
		out.RawString(prefix)
		out.Int(int(in.RandomID))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v87, v88 := range in.Attachments {
				if v87 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1EncodeGithubComStek29Vk2(out, v88)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"important\":"
		out.RawString(prefix)
		out.Bool(bool(in.Important))
	}
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		out.String(string(in.Payload))
	}
	{
		const prefix string = ",\"fwd_messages\":"
		out.RawString(prefix)
		if in.ForwardedMessages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v89, v90 := range in.ForwardedMessages {
				if v89 > 0 {
					out.RawByte(',')
				}
				(v90).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix)
		if in.Action == nil {
			out.RawString("null")
		} else {
			easyjsonC7452bc1Encode11(out, *in.Action)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk42(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk43(in *jlexer.Lexer, out *MessageEdit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "conversation_message_id":
			out.ConversationID = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "peer_id":
			out.PeerID = int(in.Int())
		case "from_id":
			out.FromID = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "random_id":
			out.RandomID = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v91 Attachment
					if data := in.Raw(); in.Ok() {
						in.AddError((v91).UnmarshalJSON(data))
					}
					out.Attachments = append(out.Attachments, v91)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "important":
			out.Important = bool(in.Bool())
		case "payload":
			out.Payload = string(in.String())
		case "fwd_messages":
			if in.IsNull() {
				in.Skip()
				out.ForwardedMessages = nil
			} else {
				in.Delim('[')
				if out.ForwardedMessages == nil {
					if !in.IsDelim(']') {
						out.ForwardedMessages = make([]Message, 0, 0)
					} else {
						out.ForwardedMessages = []Message{}
					}
				} else {
					out.ForwardedMessages = (out.ForwardedMessages)[:0]
				}
				for !in.IsDelim(']') {
					var v92 Message
					(v92).UnmarshalEasyJSON(in)
					out.ForwardedMessages = append(out.ForwardedMessages, v92)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "action":
			if in.IsNull() {
				in.Skip()
				out.Action = nil
			} else {
				if out.Action == nil {
					out.Action = new(struct {
						Type     string `json:"type"`
						MemberID int    `json:"member_id"`
						Text     string `json:"text"`
						Email    string `json:"email"`
						Photo    struct {
							Photo50  string `json:"photo_50"`
							Photo100 string `json:"photo_100"`
							Photo200 string `json:"photo_200"`
						} `json:"photo"`
					})
				}
				easyjsonC7452bc1Decode11(in, out.Action)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk43(out *jwriter.Writer, in MessageEdit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"conversation_message_id\":"
		out.RawString(prefix)
		out.Int(int(in.ConversationID))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"peer_id\":"
		out.RawString(prefix)
		out.Int(int(in.PeerID))
	}
	{
		const prefix string = ",\"from_id\":"
		out.RawString(prefix)
		out.Int(int(in.FromID))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"random_id\":"
		out.RawString(prefix)
		out.Int(int(in.RandomID))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v93, v94 := range in.Attachments {
				if v93 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1EncodeGithubComStek29Vk2(out, v94)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"important\":"
		out.RawString(prefix)
		out.Bool(bool(in.Important))
	}
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		out.String(string(in.Payload))
	}
	{
		const prefix string = ",\"fwd_messages\":"
		out.RawString(prefix)
		if in.ForwardedMessages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v95, v96 := range in.ForwardedMessages {
				if v95 > 0 {
					out.RawByte(',')
				}
				(v96).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix)
		if in.Action == nil {
			out.RawString("null")
		} else {
			easyjsonC7452bc1Encode11(out, *in.Action)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageEdit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageEdit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageEdit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageEdit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk43(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk44(in *jlexer.Lexer, out *MessageDeny) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk44(out *jwriter.Writer, in MessageDeny) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageDeny) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageDeny) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageDeny) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageDeny) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk44(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk45(in *jlexer.Lexer, out *MessageAllow) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = int(in.Int())
		case "key":
			out.Key = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk45(out *jwriter.Writer, in MessageAllow) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix)
		out.String(string(in.Key))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageAllow) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk45(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageAllow) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk45(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageAllow) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk45(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageAllow) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk45(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk46(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "conversation_message_id":
			out.ConversationID = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "peer_id":
			out.PeerID = int(in.Int())
		case "from_id":
			out.FromID = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "random_id":
			out.RandomID = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v97 Attachment
					if data := in.Raw(); in.Ok() {
						in.AddError((v97).UnmarshalJSON(data))
					}
					out.Attachments = append(out.Attachments, v97)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "important":
			out.Important = bool(in.Bool())
		case "payload":
			out.Payload = string(in.String())
		case "fwd_messages":
			if in.IsNull() {
				in.Skip()
				out.ForwardedMessages = nil
			} else {
				in.Delim('[')
				if out.ForwardedMessages == nil {
					if !in.IsDelim(']') {
						out.ForwardedMessages = make([]Message, 0, 0)
					} else {
						out.ForwardedMessages = []Message{}
					}
				} else {
					out.ForwardedMessages = (out.ForwardedMessages)[:0]
				}
				for !in.IsDelim(']') {
					var v98 Message
					(v98).UnmarshalEasyJSON(in)
					out.ForwardedMessages = append(out.ForwardedMessages, v98)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "action":
			if in.IsNull() {
				in.Skip()
				out.Action = nil
			} else {
				if out.Action == nil {
					out.Action = new(struct {
						Type     string `json:"type"`
						MemberID int    `json:"member_id"`
						Text     string `json:"text"`
						Email    string `json:"email"`
						Photo    struct {
							Photo50  string `json:"photo_50"`
							Photo100 string `json:"photo_100"`
							Photo200 string `json:"photo_200"`
						} `json:"photo"`
					})
				}
				easyjsonC7452bc1Decode11(in, out.Action)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk46(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"conversation_message_id\":"
		out.RawString(prefix)
		out.Int(int(in.ConversationID))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"peer_id\":"
		out.RawString(prefix)
		out.Int(int(in.PeerID))
	}
	{
		const prefix string = ",\"from_id\":"
		out.RawString(prefix)
		out.Int(int(in.FromID))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"random_id\":"
		out.RawString(prefix)
		out.Int(int(in.RandomID))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v99, v100 := range in.Attachments {
				if v99 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1EncodeGithubComStek29Vk2(out, v100)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"important\":"
		out.RawString(prefix)
		out.Bool(bool(in.Important))
	}
	{
		const prefix string = ",\"payload\":"
		out.RawString(prefix)
		out.String(string(in.Payload))
	}
	{
		const prefix string = ",\"fwd_messages\":"
		out.RawString(prefix)
		if in.ForwardedMessages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v101, v102 := range in.ForwardedMessages {
				if v101 > 0 {
					out.RawByte(',')
				}
				(v102).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix)
		if in.Action == nil {
			out.RawString("null")
		} else {
			easyjsonC7452bc1Encode11(out, *in.Action)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk46(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk46(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk46(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk46(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk47(in *jlexer.Lexer, out *MarketItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "owner_id":
			out.OwnerID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "price":
			easyjsonC7452bc1Decode13(in, &out.Price)
		case "category":
			(out.Category).UnmarshalEasyJSON(in)
		case "thumb_photo":
			out.ThumbPhoto = string(in.String())
		case "date":
			out.Date = int(in.Int())
		case "availability":
			out.Availability = int(in.Int())
		case "photos":
			if in.IsNull() {
				in.Skip()
				out.Photos = nil
			} else {
				in.Delim('[')
				if out.Photos == nil {
					if !in.IsDelim(']') {
						out.Photos = make([]Photo, 0, 0)
					} else {
						out.Photos = []Photo{}
					}
				} else {
					out.Photos = (out.Photos)[:0]
				}
				for !in.IsDelim(']') {
					var v103 Photo
					(v103).UnmarshalEasyJSON(in)
					out.Photos = append(out.Photos, v103)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "can_comment":
			(out.CanComment).UnmarshalEasyJSON(in)
		case "can_repost":
			(out.CanRepost).UnmarshalEasyJSON(in)
		case "likes":
			easyjsonC7452bc1Decode4(in, &out.Likes)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk47(out *jwriter.Writer, in MarketItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.OwnerID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		easyjsonC7452bc1Encode13(out, in.Price)
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		(in.Category).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"thumb_photo\":"
		out.RawString(prefix)
		out.String(string(in.ThumbPhoto))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"availability\":"
		out.RawString(prefix)
		out.Int(int(in.Availability))
	}
	{
		const prefix string = ",\"photos\":"
		out.RawString(prefix)
		if in.Photos == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v104, v105 := range in.Photos {
				if v104 > 0 {
					out.RawByte(',')
				}
				(v105).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"can_comment\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanComment))
	}
	{
		const prefix string = ",\"can_repost\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanRepost))
	}
	{
		const prefix string = ",\"likes\":"
		out.RawString(prefix)
		easyjsonC7452bc1Encode4(out, in.Likes)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk47(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk47(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk47(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk47(l, v)
}
func easyjsonC7452bc1Decode13(in *jlexer.Lexer, out *struct {
	Amount   int `json:"amount"`
	Currency struct {
		ID   int    `json:"id"`
		Name string `json:"name"`
	} `json:"currency"`
	Text string `json:"text"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			out.Amount = int(in.Int())
		case "currency":
			easyjsonC7452bc1Decode14(in, &out.Currency)
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1Encode13(out *jwriter.Writer, in struct {
	Amount   int `json:"amount"`
	Currency struct {
		ID   int    `json:"id"`
		Name string `json:"name"`
	} `json:"currency"`
	Text string `json:"text"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Amount))
	}
	{
		const prefix string = ",\"currency\":"
		out.RawString(prefix)
		easyjsonC7452bc1Encode14(out, in.Currency)
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}
func easyjsonC7452bc1Decode14(in *jlexer.Lexer, out *struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1Encode14(out *jwriter.Writer, in struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjsonC7452bc1DecodeGithubComStek29Vk48(in *jlexer.Lexer, out *MarketCommentRestore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "market_owner_id":
			out.MarketOwnerID = int(in.Int())
		case "item_id":
			out.ItemID = int(in.Int())
		case "id":
			out.ID = int(in.Int())
		case "from_id":
			out.FromID = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_to_user":
			out.ReplyToUser = int(in.Int())
		case "reply_to_comment":
			out.ReplyToComment = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v106 Attachment
					if data := in.Raw(); in.Ok() {
						in.AddError((v106).UnmarshalJSON(data))
					}
					out.Attachments = append(out.Attachments, v106)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk48(out *jwriter.Writer, in MarketCommentRestore) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"market_owner_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.MarketOwnerID))
	}
	{
		const prefix string = ",\"item_id\":"
		out.RawString(prefix)
		out.Int(int(in.ItemID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"from_id\":"
		out.RawString(prefix)
		out.Int(int(in.FromID))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_to_user\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyToUser))
	}
	{
		const prefix string = ",\"reply_to_comment\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyToComment))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v107, v108 := range in.Attachments {
				if v107 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1EncodeGithubComStek29Vk2(out, v108)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketCommentRestore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk48(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketCommentRestore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk48(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketCommentRestore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk48(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketCommentRestore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk48(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk49(in *jlexer.Lexer, out *MarketCommentNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "market_owner_id":
			out.MarketOwnerID = int(in.Int())
		case "item_id":
			out.ItemID = int(in.Int())
		case "id":
			out.ID = int(in.Int())
		case "from_id":
			out.FromID = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_to_user":
			out.ReplyToUser = int(in.Int())
		case "reply_to_comment":
			out.ReplyToComment = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v109 Attachment
					if data := in.Raw(); in.Ok() {
						in.AddError((v109).UnmarshalJSON(data))
					}
					out.Attachments = append(out.Attachments, v109)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk49(out *jwriter.Writer, in MarketCommentNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"market_owner_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.MarketOwnerID))
	}
	{
		const prefix string = ",\"item_id\":"
		out.RawString(prefix)
		out.Int(int(in.ItemID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"from_id\":"
		out.RawString(prefix)
		out.Int(int(in.FromID))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_to_user\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyToUser))
	}
	{
		const prefix string = ",\"reply_to_comment\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyToComment))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v110, v111 := range in.Attachments {
				if v110 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1EncodeGithubComStek29Vk2(out, v111)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketCommentNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk49(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketCommentNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk49(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketCommentNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk49(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketCommentNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk49(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk50(in *jlexer.Lexer, out *MarketCommentEdit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "market_owner_id":
			out.MarketOwnerID = int(in.Int())
		case "item_id":
			out.ItemID = int(in.Int())
		case "id":
			out.ID = int(in.Int())
		case "from_id":
			out.FromID = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_to_user":
			out.ReplyToUser = int(in.Int())
		case "reply_to_comment":
			out.ReplyToComment = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v112 Attachment
					if data := in.Raw(); in.Ok() {
						in.AddError((v112).UnmarshalJSON(data))
					}
					out.Attachments = append(out.Attachments, v112)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk50(out *jwriter.Writer, in MarketCommentEdit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"market_owner_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.MarketOwnerID))
	}
	{
		const prefix string = ",\"item_id\":"
		out.RawString(prefix)
		out.Int(int(in.ItemID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"from_id\":"
		out.RawString(prefix)
		out.Int(int(in.FromID))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_to_user\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyToUser))
	}
	{
		const prefix string = ",\"reply_to_comment\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyToComment))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v113, v114 := range in.Attachments {
				if v113 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1EncodeGithubComStek29Vk2(out, v114)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketCommentEdit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk50(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketCommentEdit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk50(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketCommentEdit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk50(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketCommentEdit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk50(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk51(in *jlexer.Lexer, out *MarketCommentDelete) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "owner_id":
			out.OwnerID = int(in.Int())
		case "id":
			out.ID = int(in.Int())
		case "user_id":
			out.UserID = int(in.Int())
		case "deleter_id":
			out.DeleterID = int(in.Int())
		case "item_id":
			out.ItemID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk51(out *jwriter.Writer, in MarketCommentDelete) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.OwnerID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"deleter_id\":"
		out.RawString(prefix)
		out.Int(int(in.DeleterID))
	}
	{
		const prefix string = ",\"item_id\":"
		out.RawString(prefix)
		out.Int(int(in.ItemID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketCommentDelete) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk51(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketCommentDelete) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk51(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketCommentDelete) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk51(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketCommentDelete) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk51(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk52(in *jlexer.Lexer, out *MarketCategory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "section":
			(out.Section).UnmarshalEasyJSON(in)
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk52(out *jwriter.Writer, in MarketCategory) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"section\":"
		out.RawString(prefix[1:])
		(in.Section).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketCategory) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk52(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketCategory) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk52(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketCategory) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk52(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketCategory) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk52(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk53(in *jlexer.Lexer, out *MarketAlbum) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "owner_id":
			out.OwnerID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "photo":
			(out.Photo).UnmarshalEasyJSON(in)
		case "count":
			out.Count = int(in.Int())
		case "updated_time":
			out.UpdatedTime = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk53(out *jwriter.Writer, in MarketAlbum) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.OwnerID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		(in.Photo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"updated_time\":"
		out.RawString(prefix)
		out.Int(int(in.UpdatedTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MarketAlbum) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk53(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MarketAlbum) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk53(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MarketAlbum) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk53(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MarketAlbum) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk53(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk54(in *jlexer.Lexer, out *Link) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "caption":
			out.Caption = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "photo":
			(out.Photo).UnmarshalEasyJSON(in)
		case "preview_page":
			out.PreviewPage = string(in.String())
		case "preview_url":
			out.PreviewURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk54(out *jwriter.Writer, in Link) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"caption\":"
		out.RawString(prefix)
		out.String(string(in.Caption))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		(in.Photo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"preview_page\":"
		out.RawString(prefix)
		out.String(string(in.PreviewPage))
	}
	{
		const prefix string = ",\"preview_url\":"
		out.RawString(prefix)
		out.String(string(in.PreviewURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Link) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk54(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Link) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk54(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Link) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk54(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Link) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk54(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk55(in *jlexer.Lexer, out *LeadFormsNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk55(out *jwriter.Writer, in LeadFormsNew) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LeadFormsNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk55(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LeadFormsNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk55(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LeadFormsNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk55(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LeadFormsNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk55(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk56(in *jlexer.Lexer, out *GroupOfficersEdit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "admin_id":
			out.AdminID = int(in.Int())
		case "user_id":
			out.UserID = int(in.Int())
		case "level_old":
			out.LevelOld = GroupOfficerRole(in.Int())
		case "level_new":
			out.LevelNew = GroupOfficerRole(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk56(out *jwriter.Writer, in GroupOfficersEdit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"admin_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.AdminID))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"level_old\":"
		out.RawString(prefix)
		out.Int(int(in.LevelOld))
	}
	{
		const prefix string = ",\"level_new\":"
		out.RawString(prefix)
		out.Int(int(in.LevelNew))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GroupOfficersEdit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk56(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GroupOfficersEdit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk56(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GroupOfficersEdit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk56(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GroupOfficersEdit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk56(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk57(in *jlexer.Lexer, out *GroupLeave) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = int(in.Int())
		case "self":
			(out.Self).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk57(out *jwriter.Writer, in GroupLeave) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"self\":"
		out.RawString(prefix)
		out.Bool(bool(in.Self))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GroupLeave) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk57(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GroupLeave) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk57(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GroupLeave) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk57(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GroupLeave) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk57(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk58(in *jlexer.Lexer, out *GroupJoin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = int(in.Int())
		case "join_type":
			out.JoinType = GroupJoinType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk58(out *jwriter.Writer, in GroupJoin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"join_type\":"
		out.RawString(prefix)
		out.String(string(in.JoinType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GroupJoin) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk58(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GroupJoin) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk58(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GroupJoin) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk58(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GroupJoin) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk58(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk59(in *jlexer.Lexer, out *GroupChangeSettings) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = int(in.Int())
		case "changes":
			easyjsonC7452bc1Decode15(in, &out.Changes)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk59(out *jwriter.Writer, in GroupChangeSettings) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"changes\":"
		out.RawString(prefix)
		easyjsonC7452bc1Encode15(out, in.Changes)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GroupChangeSettings) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk59(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GroupChangeSettings) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk59(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GroupChangeSettings) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk59(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GroupChangeSettings) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk59(l, v)
}
func easyjsonC7452bc1Decode15(in *jlexer.Lexer, out *struct {
	Title             *ChangedStringValue `json:"title"`
	Description       *ChangedStringValue `json:"description"`
	Access            *ChangedStringValue `json:"access"`
	ScreenName        *ChangedStringValue `json:"screen_name"`
	PublicCategory    ChangedIntValue     `json:"public_category"`
	PublicSubcategory ChangedIntValue     `json:"public_subcategory"`
	Website           *ChangedStringValue `json:"website"`
	AgeLimits         ChangedIntValue     `json:"age_limits"`
	Audio             ChangedIntValue     `json:"audio"`
	Photo             ChangedIntValue     `json:"photo"`
	Video             ChangedIntValue     `json:"video"`
	Market            ChangedIntValue     `json:"market"`
	Docs              ChangedIntValue     `json:"docs"`
	Replies           ChangedIntValue     `json:"replies"`
	StatusDefault     ChangedIntValue     `json:"status_default"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(ChangedStringValue)
				}
				(*out.Title).UnmarshalEasyJSON(in)
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(ChangedStringValue)
				}
				(*out.Description).UnmarshalEasyJSON(in)
			}
		case "access":
			if in.IsNull() {
				in.Skip()
				out.Access = nil
			} else {
				if out.Access == nil {
					out.Access = new(ChangedStringValue)
				}
				(*out.Access).UnmarshalEasyJSON(in)
			}
		case "screen_name":
			if in.IsNull() {
				in.Skip()
				out.ScreenName = nil
			} else {
				if out.ScreenName == nil {
					out.ScreenName = new(ChangedStringValue)
				}
				(*out.ScreenName).UnmarshalEasyJSON(in)
			}
		case "public_category":
			(out.PublicCategory).UnmarshalEasyJSON(in)
		case "public_subcategory":
			(out.PublicSubcategory).UnmarshalEasyJSON(in)
		case "website":
			if in.IsNull() {
				in.Skip()
				out.Website = nil
			} else {
				if out.Website == nil {
					out.Website = new(ChangedStringValue)
				}
				(*out.Website).UnmarshalEasyJSON(in)
			}
		case "age_limits":
			(out.AgeLimits).UnmarshalEasyJSON(in)
		case "audio":
			(out.Audio).UnmarshalEasyJSON(in)
		case "photo":
			(out.Photo).UnmarshalEasyJSON(in)
		case "video":
			(out.Video).UnmarshalEasyJSON(in)
		case "market":
			(out.Market).UnmarshalEasyJSON(in)
		case "docs":
			(out.Docs).UnmarshalEasyJSON(in)
		case "replies":
			(out.Replies).UnmarshalEasyJSON(in)
		case "status_default":
			(out.StatusDefault).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1Encode15(out *jwriter.Writer, in struct {
	Title             *ChangedStringValue `json:"title"`
	Description       *ChangedStringValue `json:"description"`
	Access            *ChangedStringValue `json:"access"`
	ScreenName        *ChangedStringValue `json:"screen_name"`
	PublicCategory    ChangedIntValue     `json:"public_category"`
	PublicSubcategory ChangedIntValue     `json:"public_subcategory"`
	Website           *ChangedStringValue `json:"website"`
	AgeLimits         ChangedIntValue     `json:"age_limits"`
	Audio             ChangedIntValue     `json:"audio"`
	Photo             ChangedIntValue     `json:"photo"`
	Video             ChangedIntValue     `json:"video"`
	Market            ChangedIntValue     `json:"market"`
	Docs              ChangedIntValue     `json:"docs"`
	Replies           ChangedIntValue     `json:"replies"`
	StatusDefault     ChangedIntValue     `json:"status_default"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		if in.Title == nil {
			out.RawString("null")
		} else {
			(*in.Title).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		if in.Description == nil {
			out.RawString("null")
		} else {
			(*in.Description).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"access\":"
		out.RawString(prefix)
		if in.Access == nil {
			out.RawString("null")
		} else {
			(*in.Access).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"screen_name\":"
		out.RawString(prefix)
		if in.ScreenName == nil {
			out.RawString("null")
		} else {
			(*in.ScreenName).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"public_category\":"
		out.RawString(prefix)
		(in.PublicCategory).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"public_subcategory\":"
		out.RawString(prefix)
		(in.PublicSubcategory).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"website\":"
		out.RawString(prefix)
		if in.Website == nil {
			out.RawString("null")
		} else {
			(*in.Website).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"age_limits\":"
		out.RawString(prefix)
		(in.AgeLimits).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"audio\":"
		out.RawString(prefix)
		(in.Audio).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		(in.Photo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"video\":"
		out.RawString(prefix)
		(in.Video).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"market\":"
		out.RawString(prefix)
		(in.Market).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"docs\":"
		out.RawString(prefix)
		(in.Docs).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"replies\":"
		out.RawString(prefix)
		(in.Replies).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"status_default\":"
		out.RawString(prefix)
		(in.StatusDefault).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
func easyjsonC7452bc1DecodeGithubComStek29Vk60(in *jlexer.Lexer, out *GroupChangePhoto) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = int(in.Int())
		case "photo":
			(out.Photo).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk60(out *jwriter.Writer, in GroupChangePhoto) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		(in.Photo).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GroupChangePhoto) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk60(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GroupChangePhoto) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk60(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GroupChangePhoto) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk60(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GroupChangePhoto) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk60(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk61(in *jlexer.Lexer, out *GroupAddress) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "additional_address":
			out.AdditionalAddress = string(in.String())
		case "country_id":
			out.CountryID = int(in.Int())
		case "city_id":
			out.CityID = int(in.Int())
		case "metro_station_id":
			out.MetroStationID = int(in.Int())
		case "latitude":
			out.Latitude = float32(in.Float32())
		case "longitude":
			out.Longitude = float32(in.Float32())
		case "distance":
			out.Distance = int(in.Int())
		case "work_info_status":
			out.WorkInfoStatus = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "time_offset":
			out.TimeOffset = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk61(out *jwriter.Writer, in GroupAddress) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	if in.Address != "" {
		const prefix string = ",\"address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Address))
	}
	if in.AdditionalAddress != "" {
		const prefix string = ",\"additional_address\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AdditionalAddress))
	}
	if in.CountryID != 0 {
		const prefix string = ",\"country_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CountryID))
	}
	if in.CityID != 0 {
		const prefix string = ",\"city_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CityID))
	}
	if in.MetroStationID != 0 {
		const prefix string = ",\"metro_station_id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MetroStationID))
	}
	if in.Latitude != 0 {
		const prefix string = ",\"latitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Latitude))
	}
	if in.Longitude != 0 {
		const prefix string = ",\"longitude\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float32(float32(in.Longitude))
	}
	if in.Distance != 0 {
		const prefix string = ",\"distance\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Distance))
	}
	if in.WorkInfoStatus != "" {
		const prefix string = ",\"work_info_status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WorkInfoStatus))
	}
	if in.Phone != "" {
		const prefix string = ",\"phone\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Phone))
	}
	if in.TimeOffset != 0 {
		const prefix string = ",\"time_offset\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TimeOffset))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GroupAddress) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk61(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GroupAddress) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk61(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GroupAddress) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk61(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GroupAddress) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk61(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk62(in *jlexer.Lexer, out *Group) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "screen_name":
			out.ScreenName = string(in.String())
		case "is_closed":
			(out.IsClosed).UnmarshalEasyJSON(in)
		case "deactivated":
			out.Deactivated = string(in.String())
		case "invited_by":
			out.InvitedBy = int(in.Int())
		case "type":
			out.Type = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "fixed_post":
			out.FixedPost = int(in.Int())
		case "main_album_id":
			out.MainAlbumID = int(in.Int())
		case "main_section":
			out.MainSection = int(in.Int())
		case "market":
			if in.IsNull() {
				in.Skip()
				out.Market = nil
			} else {
				if out.Market == nil {
					out.Market = new(struct {
						Enabled     int `json:"enabled"`
						PriceMin    int `json:"price_min"`
						PriceMax    int `json:"price_max"`
						MainAlbumID int `json:"main_album_id"`
						ContactID   int `json:"contact_id"`
						Currency    struct {
							ID   int    `json:"id"`
							Name string `json:"name"`
						} `json:"currency"`
						CurrencyText string `json:"currency_text"`
					})
				}
				easyjsonC7452bc1Decode16(in, out.Market)
			}
		case "photo_50":
			out.Photo50 = string(in.String())
		case "photo_100":
			out.Photo100 = string(in.String())
		case "photo_200":
			out.Photo200 = string(in.String())
		case "activity":
			out.Activity = string(in.String())
		case "age_limits":
			out.AgeLimits = int(in.Int())
		case "admin_level":
			out.AdminLevel = int(in.Int())
		case "is_admin":
			(out.IsAdmin).UnmarshalEasyJSON(in)
		case "is_member":
			(out.IsMember).UnmarshalEasyJSON(in)
		case "is_favorite":
			(out.IsFavorite).UnmarshalEasyJSON(in)
		case "is_hidden_from_feed":
			(out.IsHiddenFromFeed).UnmarshalEasyJSON(in)
		case "is_messages_blocked":
			(out.IsMessagesBlocked).UnmarshalEasyJSON(in)
		case "can_create_topic":
			(out.CanCreateTopic).UnmarshalEasyJSON(in)
		case "can_message":
			(out.CanMessage).UnmarshalEasyJSON(in)
		case "can_post":
			(out.CanPost).UnmarshalEasyJSON(in)
		case "can_see_all_posts":
			(out.CanSeeAllPosts).UnmarshalEasyJSON(in)
		case "can_upload_doc":
			(out.CanUploadDoc).UnmarshalEasyJSON(in)
		case "can_upload_video":
			(out.CanUploadVideo).UnmarshalEasyJSON(in)
		case "has_photo":
			(out.HasPhoto).UnmarshalEasyJSON(in)
		case "ban_info":
			if in.IsNull() {
				in.Skip()
				out.BanInfo = nil
			} else {
				if out.BanInfo == nil {
					out.BanInfo = new(struct {
						EndDate int    `json:"end_date"`
						Comment string `json:"comment"`
					})
				}
				easyjsonC7452bc1Decode17(in, out.BanInfo)
			}
		case "city":
			if in.IsNull() {
				in.Skip()
				out.City = nil
			} else {
				if out.City == nil {
					out.City = new(BaseObject)
				}
				(*out.City).UnmarshalEasyJSON(in)
			}
		case "country":
			if in.IsNull() {
				in.Skip()
				out.Country = nil
			} else {
				if out.Country == nil {
					out.Country = new(BaseObject)
				}
				(*out.Country).UnmarshalEasyJSON(in)
			}
		case "cover":
			if in.IsNull() {
				in.Skip()
				out.Cover = nil
			} else {
				if out.Cover == nil {
					out.Cover = new(struct {
						Enabled int         `json:"enabled"`
						Images  []BaseImage `json:"images"`
					})
				}
				easyjsonC7452bc1Decode18(in, out.Cover)
			}
		case "crop_photo":
			if in.IsNull() {
				in.Skip()
				out.CropPhoto = nil
			} else {
				if out.CropPhoto == nil {
					out.CropPhoto = new(CropPhoto)
				}
				(*out.CropPhoto).UnmarshalEasyJSON(in)
			}
		case "contacts":
			if in.IsNull() {
				in.Skip()
				out.Contacts = nil
			} else {
				in.Delim('[')
				if out.Contacts == nil {
					if !in.IsDelim(']') {
						out.Contacts = make([]struct {
							UserID      int    `json:"user_id"`
							Description string `json:"desc"`
							Phone       string `json:"phone"`
							Email       string `json:"email"`
						}, 0, 1)
					} else {
						out.Contacts = []struct {
							UserID      int    `json:"user_id"`
							Description string `json:"desc"`
							Phone       string `json:"phone"`
							Email       string `json:"email"`
						}{}
					}
				} else {
					out.Contacts = (out.Contacts)[:0]
				}
				for !in.IsDelim(']') {
					var v115 struct {
						UserID      int    `json:"user_id"`
						Description string `json:"desc"`
						Phone       string `json:"phone"`
						Email       string `json:"email"`
					}
					easyjsonC7452bc1Decode19(in, &v115)
					out.Contacts = append(out.Contacts, v115)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "links":
			if in.IsNull() {
				in.Skip()
				out.Links = nil
			} else {
				in.Delim('[')
				if out.Links == nil {
					if !in.IsDelim(']') {
						out.Links = make([]MiniLink, 0, 0)
					} else {
						out.Links = []MiniLink{}
					}
				} else {
					out.Links = (out.Links)[:0]
				}
				for !in.IsDelim(']') {
					var v116 MiniLink
					(v116).UnmarshalEasyJSON(in)
					out.Links = append(out.Links, v116)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "counters":
			if in.IsNull() {
				in.Skip()
				out.Counters = nil
			} else {
				if out.Counters == nil {
					out.Counters = new(struct {
						Albums int `json:"albums"`
						Videos int `json:"videos"`
						Audios int `json:"audios"`
						Photos int `json:"photos"`
						Topics int `json:"topics"`
						Docs   int `json:"docs"`
						Market int `json:"market"`
					})
				}
				easyjsonC7452bc1Decode20(in, out.Counters)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk62(out *jwriter.Writer, in Group) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"screen_name\":"
		out.RawString(prefix)
		out.String(string(in.ScreenName))
	}
	{
		const prefix string = ",\"is_closed\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsClosed))
	}
	{
		const prefix string = ",\"deactivated\":"
		out.RawString(prefix)
		out.String(string(in.Deactivated))
	}
	{
		const prefix string = ",\"invited_by\":"
		out.RawString(prefix)
		out.Int(int(in.InvitedBy))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"fixed_post\":"
		out.RawString(prefix)
		out.Int(int(in.FixedPost))
	}
	{
		const prefix string = ",\"main_album_id\":"
		out.RawString(prefix)
		out.Int(int(in.MainAlbumID))
	}
	{
		const prefix string = ",\"main_section\":"
		out.RawString(prefix)
		out.Int(int(in.MainSection))
	}
	{
		const prefix string = ",\"market\":"
		out.RawString(prefix)
		if in.Market == nil {
			out.RawString("null")
		} else {
			easyjsonC7452bc1Encode16(out, *in.Market)
		}
	}
	{
		const prefix string = ",\"photo_50\":"
		out.RawString(prefix)
		out.String(string(in.Photo50))
	}
	{
		const prefix string = ",\"photo_100\":"
		out.RawString(prefix)
		out.String(string(in.Photo100))
	}
	{
		const prefix string = ",\"photo_200\":"
		out.RawString(prefix)
		out.String(string(in.Photo200))
	}
	{
		const prefix string = ",\"activity\":"
		out.RawString(prefix)
		out.String(string(in.Activity))
	}
	{
		const prefix string = ",\"age_limits\":"
		out.RawString(prefix)
		out.Int(int(in.AgeLimits))
	}
	{
		const prefix string = ",\"admin_level\":"
		out.RawString(prefix)
		out.Int(int(in.AdminLevel))
	}
	{
		const prefix string = ",\"is_admin\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAdmin))
	}
	{
		const prefix string = ",\"is_member\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsMember))
	}
	{
		const prefix string = ",\"is_favorite\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsFavorite))
	}
	{
		const prefix string = ",\"is_hidden_from_feed\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsHiddenFromFeed))
	}
	{
		const prefix string = ",\"is_messages_blocked\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsMessagesBlocked))
	}
	{
		const prefix string = ",\"can_create_topic\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanCreateTopic))
	}
	{
		const prefix string = ",\"can_message\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanMessage))
	}
	{
		const prefix string = ",\"can_post\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanPost))
	}
	{
		const prefix string = ",\"can_see_all_posts\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanSeeAllPosts))
	}
	{
		const prefix string = ",\"can_upload_doc\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanUploadDoc))
	}
	{
		const prefix string = ",\"can_upload_video\":"
		out.RawString(prefix)
		out.Bool(bool(in.CanUploadVideo))
	}
	{
		const prefix string = ",\"has_photo\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasPhoto))
	}
	{
		const prefix string = ",\"ban_info\":"
		out.RawString(prefix)
		if in.BanInfo == nil {
			out.RawString("null")
		} else {
			easyjsonC7452bc1Encode17(out, *in.BanInfo)
		}
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		if in.City == nil {
			out.RawString("null")
		} else {
			(*in.City).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix)
		if in.Country == nil {
			out.RawString("null")
		} else {
			(*in.Country).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"cover\":"
		out.RawString(prefix)
		if in.Cover == nil {
			out.RawString("null")
		} else {
			easyjsonC7452bc1Encode18(out, *in.Cover)
		}
	}
	{
		const prefix string = ",\"crop_photo\":"
		out.RawString(prefix)
		if in.CropPhoto == nil {
			out.RawString("null")
		} else {
			(*in.CropPhoto).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"contacts\":"
		out.RawString(prefix)
		if in.Contacts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v117, v118 := range in.Contacts {
				if v117 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1Encode19(out, v118)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"links\":"
		out.RawString(prefix)
		if in.Links == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v119, v120 := range in.Links {
				if v119 > 0 {
					out.RawByte(',')
				}
				(v120).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"counters\":"
		out.RawString(prefix)
		if in.Counters == nil {
			out.RawString("null")
		} else {
			easyjsonC7452bc1Encode20(out, *in.Counters)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Group) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk62(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Group) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk62(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Group) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk62(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Group) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk62(l, v)
}
func easyjsonC7452bc1Decode20(in *jlexer.Lexer, out *struct {
	Albums int `json:"albums"`
	Videos int `json:"videos"`
	Audios int `json:"audios"`
	Photos int `json:"photos"`
	Topics int `json:"topics"`
	Docs   int `json:"docs"`
	Market int `json:"market"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "albums":
			out.Albums = int(in.Int())
		case "videos":
			out.Videos = int(in.Int())
		case "audios":
			out.Audios = int(in.Int())
		case "photos":
			out.Photos = int(in.Int())
		case "topics":
			out.Topics = int(in.Int())
		case "docs":
			out.Docs = int(in.Int())
		case "market":
			out.Market = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1Encode20(out *jwriter.Writer, in struct {
	Albums int `json:"albums"`
	Videos int `json:"videos"`
	Audios int `json:"audios"`
	Photos int `json:"photos"`
	Topics int `json:"topics"`
	Docs   int `json:"docs"`
	Market int `json:"market"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"albums\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Albums))
	}
	{
		const prefix string = ",\"videos\":"
		out.RawString(prefix)
		out.Int(int(in.Videos))
	}
	{
		const prefix string = ",\"audios\":"
		out.RawString(prefix)
		out.Int(int(in.Audios))
	}
	{
		const prefix string = ",\"photos\":"
		out.RawString(prefix)
		out.Int(int(in.Photos))
	}
	{
		const prefix string = ",\"topics\":"
		out.RawString(prefix)
		out.Int(int(in.Topics))
	}
	{
		const prefix string = ",\"docs\":"
		out.RawString(prefix)
		out.Int(int(in.Docs))
	}
	{
		const prefix string = ",\"market\":"
		out.RawString(prefix)
		out.Int(int(in.Market))
	}
	out.RawByte('}')
}
func easyjsonC7452bc1Decode19(in *jlexer.Lexer, out *struct {
	UserID      int    `json:"user_id"`
	Description string `json:"desc"`
	Phone       string `json:"phone"`
	Email       string `json:"email"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = int(in.Int())
		case "desc":
			out.Description = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1Encode19(out *jwriter.Writer, in struct {
	UserID      int    `json:"user_id"`
	Description string `json:"desc"`
	Phone       string `json:"phone"`
	Email       string `json:"email"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"desc\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	out.RawByte('}')
}
func easyjsonC7452bc1Decode18(in *jlexer.Lexer, out *struct {
	Enabled int         `json:"enabled"`
	Images  []BaseImage `json:"images"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "enabled":
			out.Enabled = int(in.Int())
		case "images":
			if in.IsNull() {
				in.Skip()
				out.Images = nil
			} else {
				in.Delim('[')
				if out.Images == nil {
					if !in.IsDelim(']') {
						out.Images = make([]BaseImage, 0, 2)
					} else {
						out.Images = []BaseImage{}
					}
				} else {
					out.Images = (out.Images)[:0]
				}
				for !in.IsDelim(']') {
					var v121 BaseImage
					(v121).UnmarshalEasyJSON(in)
					out.Images = append(out.Images, v121)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1Encode18(out *jwriter.Writer, in struct {
	Enabled int         `json:"enabled"`
	Images  []BaseImage `json:"images"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"enabled\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Enabled))
	}
	{
		const prefix string = ",\"images\":"
		out.RawString(prefix)
		if in.Images == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v122, v123 := range in.Images {
				if v122 > 0 {
					out.RawByte(',')
				}
				(v123).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC7452bc1Decode17(in *jlexer.Lexer, out *struct {
	EndDate int    `json:"end_date"`
	Comment string `json:"comment"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "end_date":
			out.EndDate = int(in.Int())
		case "comment":
			out.Comment = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1Encode17(out *jwriter.Writer, in struct {
	EndDate int    `json:"end_date"`
	Comment string `json:"comment"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"end_date\":"
		out.RawString(prefix[1:])
		out.Int(int(in.EndDate))
	}
	{
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		out.String(string(in.Comment))
	}
	out.RawByte('}')
}
func easyjsonC7452bc1Decode16(in *jlexer.Lexer, out *struct {
	Enabled     int `json:"enabled"`
	PriceMin    int `json:"price_min"`
	PriceMax    int `json:"price_max"`
	MainAlbumID int `json:"main_album_id"`
	ContactID   int `json:"contact_id"`
	Currency    struct {
		ID   int    `json:"id"`
		Name string `json:"name"`
	} `json:"currency"`
	CurrencyText string `json:"currency_text"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "enabled":
			out.Enabled = int(in.Int())
		case "price_min":
			out.PriceMin = int(in.Int())
		case "price_max":
			out.PriceMax = int(in.Int())
		case "main_album_id":
			out.MainAlbumID = int(in.Int())
		case "contact_id":
			out.ContactID = int(in.Int())
		case "currency":
			easyjsonC7452bc1Decode14(in, &out.Currency)
		case "currency_text":
			out.CurrencyText = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1Encode16(out *jwriter.Writer, in struct {
	Enabled     int `json:"enabled"`
	PriceMin    int `json:"price_min"`
	PriceMax    int `json:"price_max"`
	MainAlbumID int `json:"main_album_id"`
	ContactID   int `json:"contact_id"`
	Currency    struct {
		ID   int    `json:"id"`
		Name string `json:"name"`
	} `json:"currency"`
	CurrencyText string `json:"currency_text"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"enabled\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Enabled))
	}
	{
		const prefix string = ",\"price_min\":"
		out.RawString(prefix)
		out.Int(int(in.PriceMin))
	}
	{
		const prefix string = ",\"price_max\":"
		out.RawString(prefix)
		out.Int(int(in.PriceMax))
	}
	{
		const prefix string = ",\"main_album_id\":"
		out.RawString(prefix)
		out.Int(int(in.MainAlbumID))
	}
	{
		const prefix string = ",\"contact_id\":"
		out.RawString(prefix)
		out.Int(int(in.ContactID))
	}
	{
		const prefix string = ",\"currency\":"
		out.RawString(prefix)
		easyjsonC7452bc1Encode14(out, in.Currency)
	}
	{
		const prefix string = ",\"currency_text\":"
		out.RawString(prefix)
		out.String(string(in.CurrencyText))
	}
	out.RawByte('}')
}
func easyjsonC7452bc1DecodeGithubComStek29Vk63(in *jlexer.Lexer, out *Gift) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "thumb_256":
			out.Thumb256 = string(in.String())
		case "thumb_96":
			out.Thumb96 = string(in.String())
		case "thumb_48":
			out.Thumb48 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk63(out *jwriter.Writer, in Gift) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"thumb_256\":"
		out.RawString(prefix)
		out.String(string(in.Thumb256))
	}
	{
		const prefix string = ",\"thumb_96\":"
		out.RawString(prefix)
		out.String(string(in.Thumb96))
	}
	{
		const prefix string = ",\"thumb_48\":"
		out.RawString(prefix)
		out.String(string(in.Thumb48))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Gift) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk63(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Gift) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk63(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Gift) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk63(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Gift) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk63(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk64(in *jlexer.Lexer, out *DocumentPreviewVideo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "src":
			out.Src = string(in.String())
		case "width":
			out.Width = int(in.Int())
		case "height":
			out.Height = int(in.Int())
		case "filesize":
			out.Filesize = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk64(out *jwriter.Writer, in DocumentPreviewVideo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"src\":"
		out.RawString(prefix[1:])
		out.String(string(in.Src))
	}
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix)
		out.Int(int(in.Width))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	{
		const prefix string = ",\"filesize\":"
		out.RawString(prefix)
		out.Int(int(in.Filesize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DocumentPreviewVideo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk64(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DocumentPreviewVideo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk64(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DocumentPreviewVideo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk64(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DocumentPreviewVideo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk64(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk65(in *jlexer.Lexer, out *DocumentPreviewPhoto) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sizes":
			if in.IsNull() {
				in.Skip()
				out.Sizes = nil
			} else {
				in.Delim('[')
				if out.Sizes == nil {
					if !in.IsDelim(']') {
						out.Sizes = make([]PhotoSize, 0, 1)
					} else {
						out.Sizes = []PhotoSize{}
					}
				} else {
					out.Sizes = (out.Sizes)[:0]
				}
				for !in.IsDelim(']') {
					var v124 PhotoSize
					(v124).UnmarshalEasyJSON(in)
					out.Sizes = append(out.Sizes, v124)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk65(out *jwriter.Writer, in DocumentPreviewPhoto) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sizes\":"
		out.RawString(prefix[1:])
		if in.Sizes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v125, v126 := range in.Sizes {
				if v125 > 0 {
					out.RawByte(',')
				}
				(v126).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DocumentPreviewPhoto) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk65(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DocumentPreviewPhoto) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk65(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DocumentPreviewPhoto) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk65(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DocumentPreviewPhoto) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk65(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk66(in *jlexer.Lexer, out *DocumentPreviewGraffiti) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "src":
			out.Src = string(in.String())
		case "width":
			out.Width = int(in.Int())
		case "height":
			out.Height = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk66(out *jwriter.Writer, in DocumentPreviewGraffiti) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"src\":"
		out.RawString(prefix[1:])
		out.String(string(in.Src))
	}
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix)
		out.Int(int(in.Width))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DocumentPreviewGraffiti) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk66(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DocumentPreviewGraffiti) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk66(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DocumentPreviewGraffiti) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk66(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DocumentPreviewGraffiti) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk66(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk67(in *jlexer.Lexer, out *DocumentPreviewAudioMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "duration":
			out.Duration = int(in.Int())
		case "waveform":
			if in.IsNull() {
				in.Skip()
				out.Waveform = nil
			} else {
				in.Delim('[')
				if out.Waveform == nil {
					if !in.IsDelim(']') {
						out.Waveform = make([]int, 0, 8)
					} else {
						out.Waveform = []int{}
					}
				} else {
					out.Waveform = (out.Waveform)[:0]
				}
				for !in.IsDelim(']') {
					var v127 int
					v127 = int(in.Int())
					out.Waveform = append(out.Waveform, v127)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "link_ogg":
			out.LinkOGG = string(in.String())
		case "link_mp3":
			out.LinkMP3 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk67(out *jwriter.Writer, in DocumentPreviewAudioMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Duration))
	}
	{
		const prefix string = ",\"waveform\":"
		out.RawString(prefix)
		if in.Waveform == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v128, v129 := range in.Waveform {
				if v128 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v129))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"link_ogg\":"
		out.RawString(prefix)
		out.String(string(in.LinkOGG))
	}
	{
		const prefix string = ",\"link_mp3\":"
		out.RawString(prefix)
		out.String(string(in.LinkMP3))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DocumentPreviewAudioMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk67(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DocumentPreviewAudioMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk67(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DocumentPreviewAudioMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk67(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DocumentPreviewAudioMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk67(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk68(in *jlexer.Lexer, out *DocumentPreview) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "photo":
			if in.IsNull() {
				in.Skip()
				out.Photo = nil
			} else {
				if out.Photo == nil {
					out.Photo = new(DocumentPreviewPhoto)
				}
				(*out.Photo).UnmarshalEasyJSON(in)
			}
		case "video":
			if in.IsNull() {
				in.Skip()
				out.Video = nil
			} else {
				if out.Video == nil {
					out.Video = new(DocumentPreviewVideo)
				}
				(*out.Video).UnmarshalEasyJSON(in)
			}
		case "audio_message":
			if in.IsNull() {
				in.Skip()
				out.AudioMessage = nil
			} else {
				if out.AudioMessage == nil {
					out.AudioMessage = new(DocumentPreviewAudioMessage)
				}
				(*out.AudioMessage).UnmarshalEasyJSON(in)
			}
		case "graffiti":
			if in.IsNull() {
				in.Skip()
				out.Graffiti = nil
			} else {
				if out.Graffiti == nil {
					out.Graffiti = new(DocumentPreviewGraffiti)
				}
				(*out.Graffiti).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk68(out *jwriter.Writer, in DocumentPreview) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix[1:])
		if in.Photo == nil {
			out.RawString("null")
		} else {
			(*in.Photo).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"video\":"
		out.RawString(prefix)
		if in.Video == nil {
			out.RawString("null")
		} else {
			(*in.Video).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"audio_message\":"
		out.RawString(prefix)
		if in.AudioMessage == nil {
			out.RawString("null")
		} else {
			(*in.AudioMessage).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"graffiti\":"
		out.RawString(prefix)
		if in.Graffiti == nil {
			out.RawString("null")
		} else {
			(*in.Graffiti).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DocumentPreview) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk68(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DocumentPreview) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk68(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DocumentPreview) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk68(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DocumentPreview) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk68(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk69(in *jlexer.Lexer, out *Document) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "owner_id":
			out.OwnerID = int(in.Int())
		case "access_key":
			out.AccessKey = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "size":
			out.Size = int(in.Int())
		case "ext":
			out.Ext = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "date":
			out.Date = int(in.Int())
		case "type":
			out.Type = int(in.Int())
		case "preview":
			(out.Preview).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk69(out *jwriter.Writer, in Document) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.OwnerID))
	}
	{
		const prefix string = ",\"access_key\":"
		out.RawString(prefix)
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Int(int(in.Size))
	}
	{
		const prefix string = ",\"ext\":"
		out.RawString(prefix)
		out.String(string(in.Ext))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"preview\":"
		out.RawString(prefix)
		(in.Preview).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Document) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk69(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Document) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk69(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Document) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk69(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Document) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk69(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk70(in *jlexer.Lexer, out *DatabaseCity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "area":
			out.Area = string(in.String())
		case "region":
			out.Region = string(in.String())
		case "important":
			out.Important = int(in.Int())
		case "id":
			out.ID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk70(out *jwriter.Writer, in DatabaseCity) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"area\":"
		out.RawString(prefix[1:])
		out.String(string(in.Area))
	}
	{
		const prefix string = ",\"region\":"
		out.RawString(prefix)
		out.String(string(in.Region))
	}
	{
		const prefix string = ",\"important\":"
		out.RawString(prefix)
		out.Int(int(in.Important))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DatabaseCity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk70(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DatabaseCity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk70(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DatabaseCity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk70(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DatabaseCity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk70(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk71(in *jlexer.Lexer, out *CropPhoto) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "photo":
			(out.Photo).UnmarshalEasyJSON(in)
		case "crop":
			easyjsonC7452bc1Decode21(in, &out.Crop)
		case "rect":
			easyjsonC7452bc1Decode21(in, &out.Rect)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk71(out *jwriter.Writer, in CropPhoto) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix[1:])
		(in.Photo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"crop\":"
		out.RawString(prefix)
		easyjsonC7452bc1Encode21(out, in.Crop)
	}
	{
		const prefix string = ",\"rect\":"
		out.RawString(prefix)
		easyjsonC7452bc1Encode21(out, in.Rect)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CropPhoto) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk71(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CropPhoto) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk71(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CropPhoto) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk71(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CropPhoto) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk71(l, v)
}
func easyjsonC7452bc1Decode21(in *jlexer.Lexer, out *struct {
	X  int `json:"x"`
	Y  int `json:"y"`
	X2 int `json:"x2"`
	Y2 int `json:"y2"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "x":
			out.X = int(in.Int())
		case "y":
			out.Y = int(in.Int())
		case "x2":
			out.X2 = int(in.Int())
		case "y2":
			out.Y2 = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1Encode21(out *jwriter.Writer, in struct {
	X  int `json:"x"`
	Y  int `json:"y"`
	X2 int `json:"x2"`
	Y2 int `json:"y2"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"x\":"
		out.RawString(prefix[1:])
		out.Int(int(in.X))
	}
	{
		const prefix string = ",\"y\":"
		out.RawString(prefix)
		out.Int(int(in.Y))
	}
	{
		const prefix string = ",\"x2\":"
		out.RawString(prefix)
		out.Int(int(in.X2))
	}
	{
		const prefix string = ",\"y2\":"
		out.RawString(prefix)
		out.Int(int(in.Y2))
	}
	out.RawByte('}')
}
func easyjsonC7452bc1DecodeGithubComStek29Vk72(in *jlexer.Lexer, out *Conversation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "peer":
			easyjsonC7452bc1Decode22(in, &out.Peer)
		case "in_read":
			out.InRead = int(in.Int())
		case "out_read":
			out.OutRead = int(in.Int())
		case "unread_count":
			out.UnreadCount = int(in.Int())
		case "important":
			out.Important = bool(in.Bool())
		case "unanswered":
			out.Unanswered = bool(in.Bool())
		case "push_settings":
			if in.IsNull() {
				in.Skip()
				out.PushSettings = nil
			} else {
				if out.PushSettings == nil {
					out.PushSettings = new(struct {
						DisabledUntil   int  `json:"disabled_until"`
						DisabledForever bool `json:"disabled_forever"`
						NoSound         bool `json:"no_sound"`
					})
				}
				easyjsonC7452bc1Decode23(in, out.PushSettings)
			}
		case "can_write":
			if in.IsNull() {
				in.Skip()
				out.CanWrite = nil
			} else {
				if out.CanWrite == nil {
					out.CanWrite = new(struct {
						Allowed bool `json:"allowed"`
						Reason  int  `json:"reason"`
					})
				}
				easyjsonC7452bc1Decode24(in, out.CanWrite)
			}
		case "chat_settings":
			if in.IsNull() {
				in.Skip()
				out.ChatSettings = nil
			} else {
				if out.ChatSettings == nil {
					out.ChatSettings = new(struct {
						MembersCount  int      `json:"members_count"`
						Title         string   `json:"title"`
						PinnedMessage *Message `json:"pinned_message"`
						State         string   `json:"state"`
						Photo         struct {
							Photo50  string `json:"photo_50"`
							Photo100 string `json:"photo_100"`
							Photo200 string `json:"photo_200"`
						} `json:"photo"`
						ActiveIDs      []int `json:"active_ids"`
						IsGroupChannel bool  `json:"is_group_channel"`
					})
				}
				easyjsonC7452bc1Decode25(in, out.ChatSettings)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk72(out *jwriter.Writer, in Conversation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"peer\":"
		out.RawString(prefix[1:])
		easyjsonC7452bc1Encode22(out, in.Peer)
	}
	{
		const prefix string = ",\"in_read\":"
		out.RawString(prefix)
		out.Int(int(in.InRead))
	}
	{
		const prefix string = ",\"out_read\":"
		out.RawString(prefix)
		out.Int(int(in.OutRead))
	}
	{
		const prefix string = ",\"unread_count\":"
		out.RawString(prefix)
		out.Int(int(in.UnreadCount))
	}
	{
		const prefix string = ",\"important\":"
		out.RawString(prefix)
		out.Bool(bool(in.Important))
	}
	{
		const prefix string = ",\"unanswered\":"
		out.RawString(prefix)
		out.Bool(bool(in.Unanswered))
	}
	{
		const prefix string = ",\"push_settings\":"
		out.RawString(prefix)
		if in.PushSettings == nil {
			out.RawString("null")
		} else {
			easyjsonC7452bc1Encode23(out, *in.PushSettings)
		}
	}
	{
		const prefix string = ",\"can_write\":"
		out.RawString(prefix)
		if in.CanWrite == nil {
			out.RawString("null")
		} else {
			easyjsonC7452bc1Encode24(out, *in.CanWrite)
		}
	}
	{
		const prefix string = ",\"chat_settings\":"
		out.RawString(prefix)
		if in.ChatSettings == nil {
			out.RawString("null")
		} else {
			easyjsonC7452bc1Encode25(out, *in.ChatSettings)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Conversation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk72(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Conversation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk72(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Conversation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk72(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Conversation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk72(l, v)
}
func easyjsonC7452bc1Decode25(in *jlexer.Lexer, out *struct {
	MembersCount  int      `json:"members_count"`
	Title         string   `json:"title"`
	PinnedMessage *Message `json:"pinned_message"`
	State         string   `json:"state"`
	Photo         struct {
		Photo50  string `json:"photo_50"`
		Photo100 string `json:"photo_100"`
		Photo200 string `json:"photo_200"`
	} `json:"photo"`
	ActiveIDs      []int `json:"active_ids"`
	IsGroupChannel bool  `json:"is_group_channel"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "members_count":
			out.MembersCount = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "pinned_message":
			if in.IsNull() {
				in.Skip()
				out.PinnedMessage = nil
			} else {
				if out.PinnedMessage == nil {
					out.PinnedMessage = new(Message)
				}
				(*out.PinnedMessage).UnmarshalEasyJSON(in)
			}
		case "state":
			out.State = string(in.String())
		case "photo":
			easyjsonC7452bc1Decode12(in, &out.Photo)
		case "active_ids":
			if in.IsNull() {
				in.Skip()
				out.ActiveIDs = nil
			} else {
				in.Delim('[')
				if out.ActiveIDs == nil {
					if !in.IsDelim(']') {
						out.ActiveIDs = make([]int, 0, 8)
					} else {
						out.ActiveIDs = []int{}
					}
				} else {
					out.ActiveIDs = (out.ActiveIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v130 int
					v130 = int(in.Int())
					out.ActiveIDs = append(out.ActiveIDs, v130)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "is_group_channel":
			out.IsGroupChannel = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1Encode25(out *jwriter.Writer, in struct {
	MembersCount  int      `json:"members_count"`
	Title         string   `json:"title"`
	PinnedMessage *Message `json:"pinned_message"`
	State         string   `json:"state"`
	Photo         struct {
		Photo50  string `json:"photo_50"`
		Photo100 string `json:"photo_100"`
		Photo200 string `json:"photo_200"`
	} `json:"photo"`
	ActiveIDs      []int `json:"active_ids"`
	IsGroupChannel bool  `json:"is_group_channel"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"members_count\":"
		out.RawString(prefix[1:])
		out.Int(int(in.MembersCount))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"pinned_message\":"
		out.RawString(prefix)
		if in.PinnedMessage == nil {
			out.RawString("null")
		} else {
			(*in.PinnedMessage).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"photo\":"
		out.RawString(prefix)
		easyjsonC7452bc1Encode12(out, in.Photo)
	}
	{
		const prefix string = ",\"active_ids\":"
		out.RawString(prefix)
		if in.ActiveIDs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v131, v132 := range in.ActiveIDs {
				if v131 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v132))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"is_group_channel\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsGroupChannel))
	}
	out.RawByte('}')
}
func easyjsonC7452bc1Decode24(in *jlexer.Lexer, out *struct {
	Allowed bool `json:"allowed"`
	Reason  int  `json:"reason"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "allowed":
			out.Allowed = bool(in.Bool())
		case "reason":
			out.Reason = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1Encode24(out *jwriter.Writer, in struct {
	Allowed bool `json:"allowed"`
	Reason  int  `json:"reason"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"allowed\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Allowed))
	}
	{
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.Int(int(in.Reason))
	}
	out.RawByte('}')
}
func easyjsonC7452bc1Decode23(in *jlexer.Lexer, out *struct {
	DisabledUntil   int  `json:"disabled_until"`
	DisabledForever bool `json:"disabled_forever"`
	NoSound         bool `json:"no_sound"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "disabled_until":
			out.DisabledUntil = int(in.Int())
		case "disabled_forever":
			out.DisabledForever = bool(in.Bool())
		case "no_sound":
			out.NoSound = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1Encode23(out *jwriter.Writer, in struct {
	DisabledUntil   int  `json:"disabled_until"`
	DisabledForever bool `json:"disabled_forever"`
	NoSound         bool `json:"no_sound"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"disabled_until\":"
		out.RawString(prefix[1:])
		out.Int(int(in.DisabledUntil))
	}
	{
		const prefix string = ",\"disabled_forever\":"
		out.RawString(prefix)
		out.Bool(bool(in.DisabledForever))
	}
	{
		const prefix string = ",\"no_sound\":"
		out.RawString(prefix)
		out.Bool(bool(in.NoSound))
	}
	out.RawByte('}')
}
func easyjsonC7452bc1Decode22(in *jlexer.Lexer, out *struct {
	ID      int    `json:"id"`
	Type    string `json:"type"`
	LocalID int    `json:"local_id"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "type":
			out.Type = string(in.String())
		case "local_id":
			out.LocalID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1Encode22(out *jwriter.Writer, in struct {
	ID      int    `json:"id"`
	Type    string `json:"type"`
	LocalID int    `json:"local_id"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"local_id\":"
		out.RawString(prefix)
		out.Int(int(in.LocalID))
	}
	out.RawByte('}')
}
func easyjsonC7452bc1DecodeGithubComStek29Vk73(in *jlexer.Lexer, out *Confirmation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk73(out *jwriter.Writer, in Confirmation) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Confirmation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk73(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Confirmation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk73(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Confirmation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk73(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Confirmation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk73(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk74(in *jlexer.Lexer, out *CommentBoard) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "from_id":
			out.FromID = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v133 Attachment
					if data := in.Raw(); in.Ok() {
						in.AddError((v133).UnmarshalJSON(data))
					}
					out.Attachments = append(out.Attachments, v133)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "likes":
			easyjsonC7452bc1Decode26(in, &out.Likes)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk74(out *jwriter.Writer, in CommentBoard) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"from_id\":"
		out.RawString(prefix)
		out.Int(int(in.FromID))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v134, v135 := range in.Attachments {
				if v134 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1EncodeGithubComStek29Vk2(out, v135)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"likes\":"
		out.RawString(prefix)
		easyjsonC7452bc1Encode26(out, in.Likes)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentBoard) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk74(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentBoard) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk74(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentBoard) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk74(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentBoard) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk74(l, v)
}
func easyjsonC7452bc1Decode26(in *jlexer.Lexer, out *struct {
	Count     int `json:"count"`
	UserLikes int `json:"user_likes"`
	CanLike   int `json:"can_like"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		case "user_likes":
			out.UserLikes = int(in.Int())
		case "can_like":
			out.CanLike = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1Encode26(out *jwriter.Writer, in struct {
	Count     int `json:"count"`
	UserLikes int `json:"user_likes"`
	CanLike   int `json:"can_like"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"user_likes\":"
		out.RawString(prefix)
		out.Int(int(in.UserLikes))
	}
	{
		const prefix string = ",\"can_like\":"
		out.RawString(prefix)
		out.Int(int(in.CanLike))
	}
	out.RawByte('}')
}
func easyjsonC7452bc1DecodeGithubComStek29Vk75(in *jlexer.Lexer, out *Comment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "from_id":
			out.FromID = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "reply_to_user":
			out.ReplyToUser = int(in.Int())
		case "reply_to_comment":
			out.ReplyToComment = int(in.Int())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v136 Attachment
					if data := in.Raw(); in.Ok() {
						in.AddError((v136).UnmarshalJSON(data))
					}
					out.Attachments = append(out.Attachments, v136)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk75(out *jwriter.Writer, in Comment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"from_id\":"
		out.RawString(prefix)
		out.Int(int(in.FromID))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"reply_to_user\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyToUser))
	}
	{
		const prefix string = ",\"reply_to_comment\":"
		out.RawString(prefix)
		out.Int(int(in.ReplyToComment))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v137, v138 := range in.Attachments {
				if v137 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1EncodeGithubComStek29Vk2(out, v138)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Comment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk75(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Comment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk75(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Comment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk75(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Comment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk75(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk76(in *jlexer.Lexer, out *Chat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "type":
			out.Type = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "admin_id":
			out.AdminID = int(in.Int())
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]int, 0, 8)
					} else {
						out.Users = []int{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v139 int
					v139 = int(in.Int())
					out.Users = append(out.Users, v139)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "members_count":
			out.MembersCount = int(in.Int())
		case "push_settings":
			easyjsonC7452bc1Decode27(in, &out.PushSettings)
		case "photo_50":
			out.Photo50 = string(in.String())
		case "photo_100":
			out.Photo100 = string(in.String())
		case "photo_200":
			out.Photo200 = string(in.String())
		case "left":
			(out.Left).UnmarshalEasyJSON(in)
		case "kicked":
			(out.Kicked).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk76(out *jwriter.Writer, in Chat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"admin_id\":"
		out.RawString(prefix)
		out.Int(int(in.AdminID))
	}
	{
		const prefix string = ",\"users\":"
		out.RawString(prefix)
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v140, v141 := range in.Users {
				if v140 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v141))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"members_count\":"
		out.RawString(prefix)
		out.Int(int(in.MembersCount))
	}
	{
		const prefix string = ",\"push_settings\":"
		out.RawString(prefix)
		easyjsonC7452bc1Encode27(out, in.PushSettings)
	}
	{
		const prefix string = ",\"photo_50\":"
		out.RawString(prefix)
		out.String(string(in.Photo50))
	}
	{
		const prefix string = ",\"photo_100\":"
		out.RawString(prefix)
		out.String(string(in.Photo100))
	}
	{
		const prefix string = ",\"photo_200\":"
		out.RawString(prefix)
		out.String(string(in.Photo200))
	}
	{
		const prefix string = ",\"left\":"
		out.RawString(prefix)
		out.Bool(bool(in.Left))
	}
	{
		const prefix string = ",\"kicked\":"
		out.RawString(prefix)
		out.Bool(bool(in.Kicked))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Chat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk76(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Chat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk76(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Chat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk76(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Chat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk76(l, v)
}
func easyjsonC7452bc1Decode27(in *jlexer.Lexer, out *struct {
	Sound         BoolInt `json:"sound"`
	DisabledUntil int     `json:"disabled_until"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sound":
			(out.Sound).UnmarshalEasyJSON(in)
		case "disabled_until":
			out.DisabledUntil = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1Encode27(out *jwriter.Writer, in struct {
	Sound         BoolInt `json:"sound"`
	DisabledUntil int     `json:"disabled_until"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sound\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Sound))
	}
	{
		const prefix string = ",\"disabled_until\":"
		out.RawString(prefix)
		out.Int(int(in.DisabledUntil))
	}
	out.RawByte('}')
}
func easyjsonC7452bc1DecodeGithubComStek29Vk77(in *jlexer.Lexer, out *ChangedStringValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "old_value":
			out.OldValue = string(in.String())
		case "new_value":
			out.NewValue = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk77(out *jwriter.Writer, in ChangedStringValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"old_value\":"
		out.RawString(prefix[1:])
		out.String(string(in.OldValue))
	}
	{
		const prefix string = ",\"new_value\":"
		out.RawString(prefix)
		out.String(string(in.NewValue))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChangedStringValue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk77(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChangedStringValue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk77(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChangedStringValue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk77(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChangedStringValue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk77(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk78(in *jlexer.Lexer, out *ChangedIntValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "old_value":
			out.OldValue = int(in.Int())
		case "new_value":
			out.NewValue = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk78(out *jwriter.Writer, in ChangedIntValue) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"old_value\":"
		out.RawString(prefix[1:])
		out.Int(int(in.OldValue))
	}
	{
		const prefix string = ",\"new_value\":"
		out.RawString(prefix)
		out.Int(int(in.NewValue))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChangedIntValue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk78(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChangedIntValue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk78(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChangedIntValue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk78(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChangedIntValue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk78(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk79(in *jlexer.Lexer, out *Category) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "subcategories":
			if in.IsNull() {
				in.Skip()
				out.Subcategories = nil
			} else {
				in.Delim('[')
				if out.Subcategories == nil {
					if !in.IsDelim(']') {
						out.Subcategories = make([]BaseObjectWithName, 0, 2)
					} else {
						out.Subcategories = []BaseObjectWithName{}
					}
				} else {
					out.Subcategories = (out.Subcategories)[:0]
				}
				for !in.IsDelim(']') {
					var v142 BaseObjectWithName
					(v142).UnmarshalEasyJSON(in)
					out.Subcategories = append(out.Subcategories, v142)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "page_count":
			out.PageCount = int(in.Int())
		case "page_previews":
			if in.IsNull() {
				in.Skip()
				out.PagePreviews = nil
			} else {
				in.Delim('[')
				if out.PagePreviews == nil {
					if !in.IsDelim(']') {
						out.PagePreviews = make([]Group, 0, 0)
					} else {
						out.PagePreviews = []Group{}
					}
				} else {
					out.PagePreviews = (out.PagePreviews)[:0]
				}
				for !in.IsDelim(']') {
					var v143 Group
					(v143).UnmarshalEasyJSON(in)
					out.PagePreviews = append(out.PagePreviews, v143)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk79(out *jwriter.Writer, in Category) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"subcategories\":"
		out.RawString(prefix[1:])
		if in.Subcategories == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v144, v145 := range in.Subcategories {
				if v144 > 0 {
					out.RawByte(',')
				}
				(v145).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.PageCount != 0 {
		const prefix string = ",\"page_count\":"
		out.RawString(prefix)
		out.Int(int(in.PageCount))
	}
	if len(in.PagePreviews) != 0 {
		const prefix string = ",\"page_previews\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v146, v147 := range in.PagePreviews {
				if v146 > 0 {
					out.RawByte(',')
				}
				(v147).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Category) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk79(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Category) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk79(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Category) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk79(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Category) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk79(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk80(in *jlexer.Lexer, out *BoardTopicPoll) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "poll_id":
			out.PollID = int(in.Int())
		case "owner_id":
			out.OwnerID = int(in.Int())
		case "created":
			out.Created = int(in.Int())
		case "question":
			out.Question = string(in.String())
		case "votes":
			out.Votes = int(in.Int())
		case "answer_id":
			out.AnswerID = int(in.Int())
		case "asnwers":
			if in.IsNull() {
				in.Skip()
				out.Asnwers = nil
			} else {
				in.Delim('[')
				if out.Asnwers == nil {
					if !in.IsDelim(']') {
						out.Asnwers = make([]PollAnswer, 0, 1)
					} else {
						out.Asnwers = []PollAnswer{}
					}
				} else {
					out.Asnwers = (out.Asnwers)[:0]
				}
				for !in.IsDelim(']') {
					var v148 PollAnswer
					(v148).UnmarshalEasyJSON(in)
					out.Asnwers = append(out.Asnwers, v148)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk80(out *jwriter.Writer, in BoardTopicPoll) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"poll_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.PollID))
	}
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.OwnerID))
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.Int(int(in.Created))
	}
	{
		const prefix string = ",\"question\":"
		out.RawString(prefix)
		out.String(string(in.Question))
	}
	{
		const prefix string = ",\"votes\":"
		out.RawString(prefix)
		out.Int(int(in.Votes))
	}
	{
		const prefix string = ",\"answer_id\":"
		out.RawString(prefix)
		out.Int(int(in.AnswerID))
	}
	{
		const prefix string = ",\"asnwers\":"
		out.RawString(prefix)
		if in.Asnwers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v149, v150 := range in.Asnwers {
				if v149 > 0 {
					out.RawByte(',')
				}
				(v150).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BoardTopicPoll) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk80(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BoardTopicPoll) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk80(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BoardTopicPoll) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk80(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BoardTopicPoll) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk80(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk81(in *jlexer.Lexer, out *BoardTopic) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "created":
			out.Created = int(in.Int())
		case "created_by":
			out.CreatedBy = int(in.Int())
		case "updated":
			out.Updated = int(in.Int())
		case "updated_by":
			out.UpdatedBy = int(in.Int())
		case "is_closed":
			(out.IsClosed).UnmarshalEasyJSON(in)
		case "is_fixed":
			(out.IsFixed).UnmarshalEasyJSON(in)
		case "comments":
			out.Comments = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk81(out *jwriter.Writer, in BoardTopic) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.Int(int(in.Created))
	}
	{
		const prefix string = ",\"created_by\":"
		out.RawString(prefix)
		out.Int(int(in.CreatedBy))
	}
	{
		const prefix string = ",\"updated\":"
		out.RawString(prefix)
		out.Int(int(in.Updated))
	}
	{
		const prefix string = ",\"updated_by\":"
		out.RawString(prefix)
		out.Int(int(in.UpdatedBy))
	}
	{
		const prefix string = ",\"is_closed\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsClosed))
	}
	{
		const prefix string = ",\"is_fixed\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsFixed))
	}
	{
		const prefix string = ",\"comments\":"
		out.RawString(prefix)
		out.Int(int(in.Comments))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BoardTopic) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk81(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BoardTopic) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk81(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BoardTopic) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk81(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BoardTopic) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk81(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk82(in *jlexer.Lexer, out *BoardPostRestore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "topic_id":
			out.TopicID = int(in.Int())
		case "topic_owner_id":
			out.TopicOwnerID = int(in.Int())
		case "id":
			out.ID = int(in.Int())
		case "from_id":
			out.FromID = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v151 Attachment
					if data := in.Raw(); in.Ok() {
						in.AddError((v151).UnmarshalJSON(data))
					}
					out.Attachments = append(out.Attachments, v151)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "likes":
			easyjsonC7452bc1Decode26(in, &out.Likes)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk82(out *jwriter.Writer, in BoardPostRestore) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"topic_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TopicID))
	}
	{
		const prefix string = ",\"topic_owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.TopicOwnerID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"from_id\":"
		out.RawString(prefix)
		out.Int(int(in.FromID))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v152, v153 := range in.Attachments {
				if v152 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1EncodeGithubComStek29Vk2(out, v153)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"likes\":"
		out.RawString(prefix)
		easyjsonC7452bc1Encode26(out, in.Likes)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BoardPostRestore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk82(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BoardPostRestore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk82(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BoardPostRestore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk82(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BoardPostRestore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk82(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk83(in *jlexer.Lexer, out *BoardPostNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "topic_id":
			out.TopicID = int(in.Int())
		case "topic_owner_id":
			out.TopicOwnerID = int(in.Int())
		case "id":
			out.ID = int(in.Int())
		case "from_id":
			out.FromID = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v154 Attachment
					if data := in.Raw(); in.Ok() {
						in.AddError((v154).UnmarshalJSON(data))
					}
					out.Attachments = append(out.Attachments, v154)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "likes":
			easyjsonC7452bc1Decode26(in, &out.Likes)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk83(out *jwriter.Writer, in BoardPostNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"topic_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TopicID))
	}
	{
		const prefix string = ",\"topic_owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.TopicOwnerID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"from_id\":"
		out.RawString(prefix)
		out.Int(int(in.FromID))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v155, v156 := range in.Attachments {
				if v155 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1EncodeGithubComStek29Vk2(out, v156)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"likes\":"
		out.RawString(prefix)
		easyjsonC7452bc1Encode26(out, in.Likes)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BoardPostNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk83(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BoardPostNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk83(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BoardPostNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk83(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BoardPostNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk83(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk84(in *jlexer.Lexer, out *BoardPostEdit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "topic_id":
			out.TopicID = int(in.Int())
		case "topic_owner_id":
			out.TopicOwnerID = int(in.Int())
		case "id":
			out.ID = int(in.Int())
		case "from_id":
			out.FromID = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "text":
			out.Text = string(in.String())
		case "attachments":
			if in.IsNull() {
				in.Skip()
				out.Attachments = nil
			} else {
				in.Delim('[')
				if out.Attachments == nil {
					if !in.IsDelim(']') {
						out.Attachments = make([]Attachment, 0, 4)
					} else {
						out.Attachments = []Attachment{}
					}
				} else {
					out.Attachments = (out.Attachments)[:0]
				}
				for !in.IsDelim(']') {
					var v157 Attachment
					if data := in.Raw(); in.Ok() {
						in.AddError((v157).UnmarshalJSON(data))
					}
					out.Attachments = append(out.Attachments, v157)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "likes":
			easyjsonC7452bc1Decode26(in, &out.Likes)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk84(out *jwriter.Writer, in BoardPostEdit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"topic_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TopicID))
	}
	{
		const prefix string = ",\"topic_owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.TopicOwnerID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"from_id\":"
		out.RawString(prefix)
		out.Int(int(in.FromID))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"attachments\":"
		out.RawString(prefix)
		if in.Attachments == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v158, v159 := range in.Attachments {
				if v158 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1EncodeGithubComStek29Vk2(out, v159)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"likes\":"
		out.RawString(prefix)
		easyjsonC7452bc1Encode26(out, in.Likes)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BoardPostEdit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk84(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BoardPostEdit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk84(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BoardPostEdit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk84(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BoardPostEdit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk84(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk85(in *jlexer.Lexer, out *BoardPostDelete) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "topic_owner_id":
			out.TopicOwnerID = int(in.Int())
		case "topic_id":
			out.TopicID = int(in.Int())
		case "id":
			out.ID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk85(out *jwriter.Writer, in BoardPostDelete) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"topic_owner_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TopicOwnerID))
	}
	{
		const prefix string = ",\"topic_id\":"
		out.RawString(prefix)
		out.Int(int(in.TopicID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BoardPostDelete) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk85(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BoardPostDelete) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk85(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BoardPostDelete) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk85(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BoardPostDelete) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk85(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk86(in *jlexer.Lexer, out *BaseObjectWithName) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk86(out *jwriter.Writer, in BaseObjectWithName) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BaseObjectWithName) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk86(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BaseObjectWithName) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk86(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BaseObjectWithName) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk86(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BaseObjectWithName) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk86(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk87(in *jlexer.Lexer, out *BaseObject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk87(out *jwriter.Writer, in BaseObject) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BaseObject) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk87(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BaseObject) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk87(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BaseObject) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk87(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BaseObject) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk87(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk88(in *jlexer.Lexer, out *BaseImage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "width":
			(out.Width).UnmarshalEasyJSON(in)
		case "height":
			(out.Height).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk88(out *jwriter.Writer, in BaseImage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"width\":"
		out.RawString(prefix)
		out.Int(int(in.Width))
	}
	{
		const prefix string = ",\"height\":"
		out.RawString(prefix)
		out.Int(int(in.Height))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BaseImage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk88(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BaseImage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk88(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BaseImage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk88(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BaseImage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk88(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk89(in *jlexer.Lexer, out *AudioNew) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "owner_id":
			out.OwnerID = int(in.Int())
		case "access_key":
			out.AccessKey = string(in.String())
		case "artist":
			out.Artist = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "duration":
			out.Duration = int(in.Int())
		case "url":
			out.URL = string(in.String())
		case "lyrics_id":
			out.LyricsID = int(in.Int())
		case "album_id":
			out.AlbumID = int(in.Int())
		case "genre_id":
			out.GenreID = int(in.Int())
		case "track_genre_id":
			out.TrackGenreID = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "no_search":
			(out.NoSearch).UnmarshalEasyJSON(in)
		case "is_licensed":
			out.IsLicensed = bool(in.Bool())
		case "is_hq":
			out.IsHQ = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk89(out *jwriter.Writer, in AudioNew) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.OwnerID))
	}
	{
		const prefix string = ",\"access_key\":"
		out.RawString(prefix)
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"artist\":"
		out.RawString(prefix)
		out.String(string(in.Artist))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Int(int(in.Duration))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"lyrics_id\":"
		out.RawString(prefix)
		out.Int(int(in.LyricsID))
	}
	{
		const prefix string = ",\"album_id\":"
		out.RawString(prefix)
		out.Int(int(in.AlbumID))
	}
	{
		const prefix string = ",\"genre_id\":"
		out.RawString(prefix)
		out.Int(int(in.GenreID))
	}
	{
		const prefix string = ",\"track_genre_id\":"
		out.RawString(prefix)
		out.Int(int(in.TrackGenreID))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"no_search\":"
		out.RawString(prefix)
		out.Bool(bool(in.NoSearch))
	}
	{
		const prefix string = ",\"is_licensed\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsLicensed))
	}
	{
		const prefix string = ",\"is_hq\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsHQ))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AudioNew) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk89(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AudioNew) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk89(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AudioNew) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk89(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AudioNew) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk89(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk90(in *jlexer.Lexer, out *Audio) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "owner_id":
			out.OwnerID = int(in.Int())
		case "access_key":
			out.AccessKey = string(in.String())
		case "artist":
			out.Artist = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "duration":
			out.Duration = int(in.Int())
		case "url":
			out.URL = string(in.String())
		case "lyrics_id":
			out.LyricsID = int(in.Int())
		case "album_id":
			out.AlbumID = int(in.Int())
		case "genre_id":
			out.GenreID = int(in.Int())
		case "track_genre_id":
			out.TrackGenreID = int(in.Int())
		case "date":
			out.Date = int(in.Int())
		case "no_search":
			(out.NoSearch).UnmarshalEasyJSON(in)
		case "is_licensed":
			out.IsLicensed = bool(in.Bool())
		case "is_hq":
			out.IsHQ = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk90(out *jwriter.Writer, in Audio) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.OwnerID))
	}
	{
		const prefix string = ",\"access_key\":"
		out.RawString(prefix)
		out.String(string(in.AccessKey))
	}
	{
		const prefix string = ",\"artist\":"
		out.RawString(prefix)
		out.String(string(in.Artist))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Int(int(in.Duration))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"lyrics_id\":"
		out.RawString(prefix)
		out.Int(int(in.LyricsID))
	}
	{
		const prefix string = ",\"album_id\":"
		out.RawString(prefix)
		out.Int(int(in.AlbumID))
	}
	{
		const prefix string = ",\"genre_id\":"
		out.RawString(prefix)
		out.Int(int(in.GenreID))
	}
	{
		const prefix string = ",\"track_genre_id\":"
		out.RawString(prefix)
		out.Int(int(in.TrackGenreID))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Int(int(in.Date))
	}
	{
		const prefix string = ",\"no_search\":"
		out.RawString(prefix)
		out.Bool(bool(in.NoSearch))
	}
	{
		const prefix string = ",\"is_licensed\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsLicensed))
	}
	{
		const prefix string = ",\"is_hq\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsHQ))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Audio) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk90(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Audio) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk90(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Audio) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk90(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Audio) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk90(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk91(in *jlexer.Lexer, out *Album) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "thumb":
			(out.Thumb).UnmarshalEasyJSON(in)
		case "owner_id":
			out.OwnerID = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "created":
			out.Created = int(in.Int())
		case "updated":
			out.Updated = int(in.Int())
		case "size":
			out.Size = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk91(out *jwriter.Writer, in Album) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"thumb\":"
		out.RawString(prefix)
		(in.Thumb).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"owner_id\":"
		out.RawString(prefix)
		out.Int(int(in.OwnerID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.Int(int(in.Created))
	}
	{
		const prefix string = ",\"updated\":"
		out.RawString(prefix)
		out.Int(int(in.Updated))
	}
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix)
		out.Int(int(in.Size))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Album) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk91(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Album) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk91(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Album) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk91(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Album) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk91(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk92(in *jlexer.Lexer, out *APIResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error":
			if in.IsNull() {
				in.Skip()
				out.Error = nil
			} else {
				if out.Error == nil {
					out.Error = new(APIError)
				}
				(*out.Error).UnmarshalEasyJSON(in)
			}
		case "response":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Response).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk92(out *jwriter.Writer, in APIResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix[1:])
		if in.Error == nil {
			out.RawString("null")
		} else {
			(*in.Error).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"response\":"
		out.RawString(prefix)
		out.Raw((in.Response).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APIResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk92(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APIResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk92(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APIResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk92(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APIResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk92(l, v)
}
func easyjsonC7452bc1DecodeGithubComStek29Vk93(in *jlexer.Lexer, out *APIError) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error_code":
			out.Code = int(in.Int())
		case "error_msg":
			out.Message = string(in.String())
		case "request_params":
			if in.IsNull() {
				in.Skip()
				out.RequestParams = nil
			} else {
				in.Delim('[')
				if out.RequestParams == nil {
					if !in.IsDelim(']') {
						out.RequestParams = make([]struct {
							Key   string `json:"key"`
							Value string `json:"value"`
						}, 0, 2)
					} else {
						out.RequestParams = []struct {
							Key   string `json:"key"`
							Value string `json:"value"`
						}{}
					}
				} else {
					out.RequestParams = (out.RequestParams)[:0]
				}
				for !in.IsDelim(']') {
					var v160 struct {
						Key   string `json:"key"`
						Value string `json:"value"`
					}
					easyjsonC7452bc1Decode28(in, &v160)
					out.RequestParams = append(out.RequestParams, v160)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1EncodeGithubComStek29Vk93(out *jwriter.Writer, in APIError) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"error_code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"error_msg\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"request_params\":"
		out.RawString(prefix)
		if in.RequestParams == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v161, v162 := range in.RequestParams {
				if v161 > 0 {
					out.RawByte(',')
				}
				easyjsonC7452bc1Encode28(out, v162)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APIError) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC7452bc1EncodeGithubComStek29Vk93(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APIError) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC7452bc1EncodeGithubComStek29Vk93(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APIError) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC7452bc1DecodeGithubComStek29Vk93(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APIError) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC7452bc1DecodeGithubComStek29Vk93(l, v)
}
func easyjsonC7452bc1Decode28(in *jlexer.Lexer, out *struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC7452bc1Encode28(out *jwriter.Writer, in struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}
